{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./src/components/BlogPageLayout/style.ts","webpack:///./src/components/BlogPageLayout/BlogPageLayout.tsx","webpack:///./src/components/LayoutInner/style.ts","webpack:///./src/components/LayoutInner/LayoutInner.tsx"],"names":["MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","Article","styled","article","BlogPageLayout","data","path","location","useMemo","pathname","LayoutInner","pageContext","showTitle","BlogPostHeader","BlogPostPageContainer","body","Container","Link","to","frontmatter","published","blogPageQuery","Body","div","BackLink","theme","fontSize","small","title","backUrl","keywords","description","show_title","images","displayTitle","coverImage","coverImageData","find","image","is_cover","childImageSharp","fluid","src","type","Typography","main"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,qrECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBC,E,EAAAA,IAClBC,EAAgBL,EAAQ,QAAxBK,YAERJ,UAAiB,SAAqB,GAKlC,IAJFK,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBP,EAAtB,GACMQ,EAAWN,EAFhB,GAKKO,EAAMV,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMW,EAAS,GAGbX,MAHa,EAIbE,OAJF,GAQMU,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAON,EAAA,mBAA2BK,WAAYG,GAA9C,M,uOChCWS,E,UAAUC,EAAOC,QAAV,qEAAGD,CAAH,MCUPE,EAA2C,SAAC,GAGnD,IAFMlB,EAEN,EAFFmB,KAAQnB,IACRoB,EACE,EADFA,KAEMC,EAAWC,mBAAQ,iBAAO,CAAEC,SAAUH,KAAS,CAACA,IAEtD,OACI,kBAACI,EAAA,EAAD,CAAaC,YAAazB,EAAKqB,SAAUA,EAAUK,WAAW,GAC1D,kBAACX,EAAD,KACI,kBAACY,EAAA,EAAD,CAAgBR,KAAMnB,IACtB,kBAAC4B,EAAA,EAAD,KACI,kBAAC,cAAD,CAAaH,YAAazB,GAAMA,EAAI6B,MACpC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GACIhC,EAAIiC,YAAYC,UACV,QACA,gBAJd,uBAgBXC,EAAgB,aA8BdjB,a,2ICpEFkB,EAAOpB,IAAOqB,IAAV,kEAAGrB,CAAH,sCAKJsB,EAAWtB,YAAOe,QAAV,sEAAGf,CAAH,yCAEJ,SAAAX,GAAK,OAAIA,EAAMkC,MAAMC,SAASC,S,wBCFlCjB,EAAwC,SAAAnB,GAAS,IAEtDD,EAcAC,EAdAD,SAFsD,EAgBtDC,EAbAgB,SAHsD,gBAGxB,GAHwB,GAG1CE,gBAH0C,MAG/B,GAH+B,IAgBtDlB,EAZAoB,YACIQ,YALkD,gBAa9C,GAb8C,GAM9CS,aAN8C,MAMtC,GANsC,MAO9CC,eAP8C,MAOpC,GAPoC,MAQ9CC,gBAR8C,MAQnC,GARmC,MAS9CC,mBAT8C,MAShC,GATgC,MAW9CC,kBAX8C,MAWjC,EAXiC,MAY9CC,cAZ8C,MAYrC,GAZqC,EAetDrB,EACArB,EADAqB,UAIEsB,EACFN,KAFwB,MAAbnB,KAEuB,IAAdG,GAAsC,IAAfoB,EAE3CG,EAAa,GACjB,GAAIF,EAAQ,CACR,IAAMG,EAAiBH,EAAOI,MAAK,SAACC,GAAD,OAAgBA,EAAMC,YACrDH,GAAkBA,EAAeE,QACG,iBAAzBF,EAAeE,MACtBH,EAAaC,EAAeE,MACrBF,EAAeE,MAAME,kBAC5BL,EAAaC,EAAeE,MAAME,gBAAgBC,MAAMC,MAKpE,OACI,oCACI,kBAAC,IAAD,CACId,MAAOA,EACPE,SAAUA,EACVC,YAAaA,EACbO,MAAOH,GAA0B,uBAEpCD,GACG,kBAAC,IAAD,CAAWS,KAAK,YACZ,kBAACC,EAAA,EAAD,CAAYC,MAAI,GAAEjB,IAG1B,kBAACN,EAAD,KACKhC,IACEuC,GAAW,kBAACL,EAAD,CAAUN,GAAIW,GAAd,gBAMfnB","file":"component---src-components-blog-page-layout-blog-page-layout-tsx-ce9e4b98c2be2db412b9.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","import styled from 'styled-components';\n\nexport const Article = styled.article``;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\n\nimport { Props } from './type';\nimport { LayoutInner } from '../LayoutInner';\nimport { BlogPostPageContainer } from './components/BlogPostPageContainer';\nimport { BlogPostHeader } from './components/BlogPostHeader';\nimport { Link } from '../Link';\nimport { Container } from '../Container';\nimport { Article } from './style';\n\nexport const BlogPageLayout: FunctionComponent<Props> = ({\n    data: { mdx },\n    path,\n}) => {\n    const location = useMemo(() => ({ pathname: path }), [path]);\n\n    return (\n        <LayoutInner pageContext={mdx} location={location} showTitle={false}>\n            <Article>\n                <BlogPostHeader data={mdx} />\n                <BlogPostPageContainer>\n                    <MDXRenderer pageContext={mdx}>{mdx.body}</MDXRenderer>\n                    <Container>\n                        <Link\n                            to={\n                                mdx.frontmatter.published\n                                    ? '/blog'\n                                    : '/blog-drafts'\n                            }\n                        >\n                            &larr; Back to list\n                        </Link>\n                    </Container>\n                </BlogPostPageContainer>\n            </Article>\n        </LayoutInner>\n    );\n};\n\nexport const blogPageQuery = graphql`\n    query BlogPostQuery($id: String) {\n        mdx(id: { eq: $id }) {\n            id\n            body\n            frontmatter {\n                title\n                date\n                keywords\n                description\n                published\n                images {\n                    image {\n                        childImageSharp {\n                            fluid(maxWidth: 1240, quality: 80) {\n                                ...GatsbyImageSharpFluid_tracedSVG\n                            }\n                        }\n                    }\n                    author\n                    source\n                    sourceText\n                    is_cover\n                    galleryId\n                }\n            }\n        }\n    }\n`;\n\nexport default BlogPageLayout;\n","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Body = styled.div`\n    flex-grow: 2;\n    padding-bottom: 5rem;\n`;\n\nexport const BackLink = styled(Link)`\n    text-decoration: none;\n    font-size: ${props => props.theme.fontSize.small};\n`;\n","/* eslint-disable @typescript-eslint/camelcase */\n\nimport React, { FunctionComponent } from 'react';\nimport { Body, BackLink } from './style';\nimport { Props } from './type';\nimport { Container, SEO } from '../';\nimport { Typography } from '../Typography';\n\nexport const LayoutInner: FunctionComponent<Props> = props => {\n    const {\n        children,\n        location: { pathname = '' } = {},\n        pageContext: {\n            frontmatter: {\n                title = '',\n                backUrl = '',\n                keywords = [],\n                description = '',\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                show_title = 1,\n                images = [],\n            } = {},\n        },\n        showTitle,\n    } = props;\n\n    const isRoot = pathname === '/';\n    const displayTitle =\n        title && !isRoot && showTitle !== false && show_title !== 0;\n\n    let coverImage = '';\n    if (images) {\n        const coverImageData = images.find((image: any) => image.is_cover);\n        if (coverImageData && coverImageData.image) {\n            if (typeof coverImageData.image === 'string') {\n                coverImage = coverImageData.image;\n            } else if (coverImageData.image.childImageSharp) {\n                coverImage = coverImageData.image.childImageSharp.fluid.src;\n            }\n        }\n    }\n\n    return (\n        <>\n            <SEO\n                title={title}\n                keywords={keywords}\n                description={description}\n                image={coverImage ? coverImage : '/assets/avatar.jpg'}\n            />\n            {displayTitle && (\n                <Container type=\"standard\">\n                    <Typography main>{title}</Typography>\n                </Container>\n            )}\n            <Body>\n                {children}\n                {!!backUrl && <BackLink to={backUrl}>&larr; Go back</BackLink>}\n            </Body>\n        </>\n    );\n};\n\nexport default LayoutInner;\n"],"sourceRoot":""}