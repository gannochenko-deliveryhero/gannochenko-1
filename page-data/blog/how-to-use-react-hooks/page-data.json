{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/how-to-use-react-hooks","result":{"data":{"mdx":{"id":"952175e5-bde0-5a38-baf8-8b300753a08a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use React Hooks\",\n  \"description\": \"React 16.7.0 is finally out. It has no hooks on-board, but sooner or later, React Hooks will be there. So today we will have a talk so weâ€™re ready to use it right away when it is time ðŸ‘€\",\n  \"keywords\": \"react, hooks\",\n  \"path\": \"/blog/how-to-use-react-hooks\",\n  \"date\": \"2019-01-08T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"Artem Sapegin\",\n    \"image\": \"/assets/blog/covers/0_ayfiDWDbZ9rrvmd4.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@sapegin\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"React 16.7.0 is finally out. It has no hooks on-board, but sooner or later, React Hooks will be there. So today we will have a talk so we\\u2019re ready to use it right away when it is time \\uD83D\\uDC40\"), mdx(\"p\", null, \"Sometimes when you write your pure function component, you realize that at some moment you need to have a sort of flag there, which indicates that a modal is open, counter increased or\\u2026 whatever. And then your second thought is: \\u201Coh man, now I need to migrate to React.Component\\u201D. Well, with hooks \\u2014 not anymo-o-ore!\"), mdx(\"p\", null, \"I\\u2019ll assume you have Node of the following versions installed: 6.14.0, 8.10.0 or greater than 9.10. If not, you can always use the Node version manager to fix that. Keep in mind though, that we will have to install all global packages in case we switch the Node version.\"), mdx(\"p\", null, \"This article requires that you have at least a basic knowledge of React, including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Ccomponent\\u201D\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Cpure function\\u201D\"), \" concepts, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Cstate\\u201D\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Ccomponent lifecycle\\u201D\"), \". But even if you don\\u2019t, no worries, you will catch up during the process, it will be fun!\"), mdx(\"h2\", null, \"Step 1: The Boilerplate {a}\"), mdx(\"p\", null, \"Open your terminal, as we are going to use a super-famous code generator for React applications, called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create-react-app\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install create-react-app -g;\\ncreate-react-app react-hooks;\\n\")), mdx(\"p\", null, \"Now, we are able to see a folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./react-hooks\"), \", so we go there and consider this to be a root of our application.\"), mdx(\"p\", null, \"In order to actually enable hooks, we need to go to a list of versions of React at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/react\"\n  }), \"npmjs.com\"), \". By the time this article was written, the latest version with hooks enabled was \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/react/v/16.7.0-alpha.2\"\n  }), \"16.7.0-alpha.2\"), \", so let\\u2019s install this. We also need to install a pair package called react-dom of exactly the same version.\"), mdx(\"p\", null, \"So,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install react@16.7.0-alpha.2 --save\\nnpm install react-dom@16.7.0-alpha.2 axios --save\\n\")), mdx(\"p\", null, \"Don\\u2019t forget to start the application:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm start\\n\")), mdx(\"h2\", null, \"Step 2: useState() {a}\"), mdx(\"p\", null, \"Let\\u2019s find the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/App.js\"), \" file and re-write it like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useState } from 'react';\\nimport './App.css';\\n\\nconst App = () => {\\n    console.dir('Render!');\\n    const [counter, setCounter] = useState(0);\\n\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                The button is pressed: {counter} times.\\n                <button\\n                    onClick={() => setCounter(counter + 1)}\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    Click me!\\n                </button>\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"And this is the first kind of hooks we can use: a state hook created with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState()\"), \". Basically, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState()\"), \" accepts the initial value of some value and returns an array, where the first element is a variable with the initial value, and the second one is a function which allows us to change the variable. After we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCounter()\"), \", the component gets re-rendered with an updated value of the counter.\"), mdx(\"p\", null, \"The equivalent code without hooks would be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport './App.css';\\n\\nclass App extends Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = { counter: 0 };\\n    }\\n\\n    render() {\\n        const { counter } = this.state;\\n        console.dir('Render!');\\n        return (\\n            <div className=\\\"App\\\">\\n                <header className=\\\"App-header\\\">\\n                    The button is pressed: {counter} times.\\n                    <button\\n                        onClick={() =>\\n                            this.setState({\\n                                counter: counter + 1,\\n                            })\\n                        }\\n                        style={{ padding: '1rem 2rem' }}\\n                    >\\n                        Click me!\\n                    </button>\\n                </header>\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"But with hooks, the code is way cleaner, and it does not even rely on object-oriented programming and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" statements, which sometimes can be really cryptic to use for non-experienced JavaScript developers.\"), mdx(\"p\", null, \"The state could be a complex object, no problem:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useState } from 'react';\\nimport './App.css';\\n\\nconst App = () => {\\n    console.dir('Render!');\\n    const [heroCounter, setHeroCounter] = useState({ batman: 0, joker: 0 });\\n\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                Batman: {heroCounter.batman} vs Joker: {heroCounter.joker}\\n                <button\\n                    onClick={() =>\\n                        setHeroCounter({\\n                            ...heroCounter,\\n                            batman: heroCounter.batman + 1,\\n                        })\\n                    }\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    One for Batman!\\n                </button>\\n                <button\\n                    onClick={() =>\\n                        setHeroCounter({\\n                            ...heroCounter,\\n                            joker: heroCounter.joker + 1,\\n                        })\\n                    }\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    One for Joker!\\n                </button>\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"But according to the philosophy of hooks, it is better to define two state values instead:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useState, useEffect } from 'react';\\nimport './App.css';\\n\\nconst SubComponent = () => {\\n    console.dir('SubComponent render!');\\n\\n    const [forBatman, setForBatman] = useState(0);\\n    const [forJoker, setForJoker] = useState(0);\\n    useEffect(() => {\\n        let title = 'Who will prevail?';\\n        if (forBatman > forJoker) {\\n            title = 'Good is winning';\\n        } else if (forJoker > forBatman) {\\n            title = 'Evil is upon us!';\\n        }\\n        document.title = title;\\n\\n        console.dir('Effect called!');\\n    });\\n\\n    return (\\n        <React.Fragment>\\n            Batman: {forBatman} vs Joker: {forJoker}\\n            <button\\n                onClick={() => setForBatman(forBatman + 1)}\\n                style={{ padding: '1rem 2rem' }}\\n            >\\n                One for Batman!\\n            </button>\\n            <button\\n                onClick={() => setForJoker(forJoker + 1)}\\n                style={{ padding: '1rem 2rem' }}\\n            >\\n                One for Joker!\\n            </button>\\n        </React.Fragment>\\n    );\\n};\\n\\nconst App = () => {\\n    console.dir('App render!');\\n\\n    const [appCounter, setAppCounter] = useState(0);\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                {appCounter < 5 && <SubComponent />}\\n                <br />\\n                Application counter: {appCounter}\\n                <button\\n                    onClick={() => setAppCounter(appCounter + 1)}\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    One for application\\n                </button>\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"This makes your code really easy to understand.\"), mdx(\"h2\", null, \"Step 3: useEffect() {a}\"), mdx(\"p\", null, \"In the react world, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"side effect\"), \" is an action that is usually executed on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidUpdate()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentWillUnmount()\"), \" lifecycle methods of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.Component\"), \". But what if we still would like to have a side effect, but with a pure function? Sure thing! Consider the code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"useEffect(() => {\\n    // ...\\n\\n    console.dir('Effect called!');\\n});\\n\")), mdx(\"p\", null, \"The function inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect()\"), \" is called on the first render and all consequent renders, which does not really make any difference between this and if we just put the code inside the component function directly.\"), mdx(\"p\", null, \"But, wait. That is not all!\"), mdx(\"p\", null, \"We could do some optimizations by telling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect()\"), \" to run only when certain values have changed. Consider this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"useEffect(() => {\\n    // ...\\n\\n    console.dir('Effect called!');\\n}, [forBatman, forJoker]);\\n\")), mdx(\"p\", null, \"So, useEffect() will memoize \", \"[forBatman, forJoker]\", \" value and will only re-run the effect if something changed in these arguments.\"), mdx(\"p\", null, \"Let\\u2019s look at the typical use cases.\"), mdx(\"h3\", null, \"Case A: execute code on un-mount {a}\"), mdx(\"p\", null, \"What if we want to catch a moment when the component gets unmounted? All we have to do is to return a function like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"useEffect(() => {\\n    // ...\\n\\n    console.dir('Effect called!');\\n\\n    return () => {\\n        console.dir('SubComponent unmounted');\\n        document.title = 'The fight is over';\\n    };\\n}, [forBatman, forJoker]);\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201CSubComponent unmounted\\u201D\"), \" will appear in the console as soon as you click the \\u201COne for application\\u201D button 5 times.\"), mdx(\"h3\", null, \"Case B: run only on mount and on unmount {a}\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"useEffect(() => {\\n    // ...\\n\\n    console.dir('Called only on mount');\\n\\n    return () => {\\n        console.dir('Called only on unmount');\\n    };\\n}, []);\\n\")), mdx(\"p\", null, \"What we could also do is to force an effect to run only on-mount and on-unmount, by passing an empty array as a dependency:\"), mdx(\"p\", null, \"It works because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \" stays the same during all the time the component is there until it gets unmounted, no matter what.\"), mdx(\"h3\", null, \"Case C: load data asynchronously on mount and on update {a}\"), mdx(\"p\", null, \"The last use-case I would like to demonstrate is how to do an asynchronous effect with some data load. Just to be clear, I don\\u2019t think that having logic for rendering data and logic for loading data in one place is actually a good idea. The main principle of single responsibility tells us there should be a pure dumb rendering logic and pure rich business logic, that is why I strongly encourage you to try \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Redux + Saga\"), \". But I guess this is a nice topic for some other time.\"), mdx(\"p\", null, \"There are two important moments to notice:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we can not use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useEffect(async () => {})\"), \", asynchronous effects are not supported (yet), but we are still able to use promises there, and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we don\\u2019t want this code to run on every render, so we need to define a second argument for useEffect() in the right way. We always ask ourselves: \\u201CWhat needs to be changed in order to re-run the effect?\\u201D. The good answer is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u201CcharacterId\\u201D\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useState, useEffect } from 'react';\\nimport axios from 'axios';\\nimport './App.css';\\n\\nconst SubComponent = ({ characterId }) => {\\n    console.dir('SubComponent render!');\\n\\n    const [character, setCharacter] = useState(null);\\n    useEffect(() => {\\n        console.dir('Effect started');\\n        axios.get(`https://swapi.co/api/people/${characterId}/`).then(res => {\\n            setCharacter(res.data);\\n        });\\n    }, [characterId]);\\n\\n    return (\\n        <React.Fragment>Hello, {!!character && character.name}</React.Fragment>\\n    );\\n};\\n\\nconst App = () => {\\n    console.dir('App render!');\\n\\n    const [characterId, setCharacterId] = useState(1);\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                <SubComponent characterId={characterId} />\\n                <br />\\n                {[1, 2, 3, 4, 5].map(i => (\\n                    <button\\n                        key={i}\\n                        onClick={() => setCharacterId(i)}\\n                        style={{ padding: '1rem 2rem' }}\\n                    >\\n                        {i}\\n                    </button>\\n                ))}\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"h2\", null, \"Step 4: useRef() & useMemo() {a}\"), mdx(\"p\", null, \"If we open the source code of React, we could see some other hooks available. Among them is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef()\"), \". We could use it in combination with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect()\"), \" to do some stuff. Consider the code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useEffect, useRef } from 'react';\\nimport './App.css';\\n\\nconst App = () => {\\n    console.dir('App render!');\\n\\n    const ref = useRef();\\n    useEffect(() => {\\n        ref.current.focus();\\n        ref.current.value = 'Who is there?';\\n    }, [ref]);\\n\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                <input type=\\\"text\\\" ref={ref} />\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"What it does is just sets the value of an input field and then calls focus() as soon as the component is mounted.\"), mdx(\"p\", null, \"Another nice one is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo()\"), \". It basically allows us to memoize some value during the process of rendering.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useMemo, useState } from 'react';\\nimport './App.css';\\n\\nconst App = () => {\\n    console.dir('App render!');\\n\\n    const [appCounter, setAppCounter] = useState(0);\\n    const [randomValueNumber, setRandomValueNumber] = useState(0);\\n\\n    const randomValue = useMemo(() => {\\n        console.dir('Calculate new value');\\n        return Math.round(Math.random() * 1000);\\n    }, [randomValueNumber]);\\n\\n    return (\\n        <div className=\\\"App\\\">\\n            <header className=\\\"App-header\\\">\\n                Application counter: {appCounter}, random value: {randomValue}\\n                <button\\n                    onClick={() => setAppCounter(appCounter + 1)}\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    Increase counter\\n                </button>\\n                <button\\n                    onClick={() => setRandomValueNumber(randomValueNumber + 1)}\\n                    style={{ padding: '1rem 2rem' }}\\n                >\\n                    Get new random value\\n                </button>\\n            </header>\\n        </div>\\n    );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"Why do so? Well in case we need to calculate something reasonably heavy (heavy when rendering, huh?), or make some remote call, but only when some certain values change, we might make use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo()\"), \" thingy. It is still not as powerful as traditional ways of memoization, as it can only be used when rendering, but still\\u2026\"), mdx(\"h2\", null, \"Step 5: Under the hood {a}\"), mdx(\"p\", null, \"You may wonder, how does this functionality even work? I mean, components are just pure functions, how do variables preserve their scalar values between function calls? Well, for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState()\"), \" returns an array, from which we use the first argument as a scalar. But this array can be memoized inside React, so next time the rendering engine is here, it already knows which values to put into those scalars.\"), mdx(\"h2\", null, \"Step 6: Don't-s {a}\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"First of all, hooks are still in alpha stage, the API may be changed in future, so use it in production on your own risk.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can not use hooks outside a component function, it is simply how they work. But, you can make \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/r/?url=https%3A%2F%2Freactjs.org%2Fdocs%2Fhooks-custom.html\"\n  }), \"a composition of hooks\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React relies on an \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"amount\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"order\"), \" of how hooks appear in the component function. So \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"don\\u2019t even think\"), \" of wrapping those calls with conditional logic of some sort. Instead, you may put your if-s inside a hook body.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"At the present moment, hooks do not work for server-side rendering. I hope this to be fixed in the final release.\")), mdx(\"h2\", null, \"Conclusion {a}\"), mdx(\"p\", null, \"Even though hooks are not available officially, they are definitely going to make our life easier, and the code way cleaner. And it is always important to have understandable code, especially when working with React.\"), mdx(\"p\", null, \"Thanks for reading!\"), mdx(\"h2\", null, \"Extras {a}\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"here is \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fawesome1888%2Fpoc_react-hooks\"\n  }), \"the Proof-of-concept repository\"), \" made for the article\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"consider reading an \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/r/?url=https%3A%2F%2Freactjs.org%2Fdocs%2Fhooks-reference.html\"\n  }), \"official Hooks reference\"), \" by Facebook\")), mdx(\"p\", null, \"Happy Reacting!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How to use React Hooks","date":"2019-01-08T00:00:00.000Z","keywords":"react, hooks","description":"React 16.7.0 is finally out. It has no hooks on-board, but sooner or later, React Hooks will be there. So today we will have a talk so weâ€™re ready to use it right away when it is time ðŸ‘€","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%205a28277%2028277%200%20018%20178%208759%208759%200%20010%201c2%200%202%200%202-9A41036%2041036%200%2001190%205m86%2091c-3%200-4%202-1%204a276%20276%200%200050-1l-2-2c-3-1-42-2-47-1m-9%206l-3%201c-3%200-3%200-3%203%201%202%200%206-1%208v12l1%208c1%207%202%2015%205%2023%205%2018%206%2031%205%2046l-1%204-11-1h-11l1%204c1%207%201%207%2011%207%207%200%209%200%2013%202%203%202%205%202%2012%202h9c1%201%202%200%203-1h7c4%201%205%200%205-1l4-1%2030-1c3-1%204-4%203-6l-12-2h-12c-1-1%200-6%201-7l1-2h-1c-2%202-3%201-2-8%201-6%202-14%205-22l4-17c2-7%202-7%203-5%202%201%203%201%204-4l1-4c1%201%203%200%205-1%203-1%208-3%2013-3%2010-1%2013-2%2016-7%204-7%203-19-1-21l-10-2-13-1c-5%200-6%201-6%2011l-2%2010c-1%203-2%202-2%200l2-12c0-9%200-10-2-10a3957%203957%200%2000-71-2m83%208c-5%204-7%2019-2%2020l3%201h-3c-2%200-2%200%200%201h9-7l6-1c8-1%2011-3%2013-7%202-5%203-9%200-12-2-3-15-4-19-2M86%20202a6545%206545%200%2001-86%205l76-1c99-4%2094-4%2094-6l-84%202m68%207c-2%202-2%202-3%201-3-3-18-3-20%200-2%202-2%202-3%201-3-3-18-3-21%200-2%202-2%202-3%201-1-3-18-3-20%200-1%202-1%202-3%201-3-3-18-3-21%200-1%202-2%202-3%200-2-2-18-2-20%201-2%202-2%202-4%200-1-2-18-2-20%201-1%202-2%202-3%201l-6-2H0v40h19c24-1%2027-2%2027-6s4-12%206-12c2%201%202%204%200%2010s-2%206%2013%206c14-1%2017-2%2016-6-1-1%200-3%201-3%202-3%204%200%204%204v3h9c11%200%2013-1%2013-5-1-4%200-5%208-5%209%200%2011-1%2011-3%200-4%200-5%202-5l2%204c0%202%201%203%203%203%203%200%205%202%205%205s2%204%2012%203c10%200%2011-1%2010-5-2-4%200-5%2011-5%2014%200%2013%201%206-16l-5-14h-9c-8%200-9%200-10%202m143%2014c2%201%201%201-3%201l-4%201h-6l-5%201%205%201%204%201-2%201c-2%200-3%202%200%203l1%204c0%203%200%203%201%202l2-2%203-1%202-2v5h2c1-2%204-2%206-1h1c0-2%200-2%202-1%202%202%206%202%206%200l-13-5-5-1c-2-1-2-1-2%201-1%203-4%204-4%201s3-4%206-4h3l2-1%201-1%202-3c2-1%202-1-2-1-3%200-4%200-3%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.497584541062802,"src":"/static/05a4827fabb666413b9469c1eaafe17c/77467/0_ayfiDWDbZ9rrvmd4.jpg","srcSet":"/static/05a4827fabb666413b9469c1eaafe17c/dece2/0_ayfiDWDbZ9rrvmd4.jpg 310w,\n/static/05a4827fabb666413b9469c1eaafe17c/fcb16/0_ayfiDWDbZ9rrvmd4.jpg 620w,\n/static/05a4827fabb666413b9469c1eaafe17c/77467/0_ayfiDWDbZ9rrvmd4.jpg 1240w,\n/static/05a4827fabb666413b9469c1eaafe17c/b1020/0_ayfiDWDbZ9rrvmd4.jpg 1860w,\n/static/05a4827fabb666413b9469c1eaafe17c/88564/0_ayfiDWDbZ9rrvmd4.jpg 2480w,\n/static/05a4827fabb666413b9469c1eaafe17c/de9c6/0_ayfiDWDbZ9rrvmd4.jpg 4000w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"Artem Sapegin","source":"https://unsplash.com/@sapegin","sourceText":"Unsplash","is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"952175e5-bde0-5a38-baf8-8b300753a08a"}}}