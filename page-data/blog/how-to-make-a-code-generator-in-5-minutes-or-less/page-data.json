{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/how-to-make-a-code-generator-in-5-minutes-or-less","result":{"data":{"mdx":{"id":"f58f2983-f3e8-5c66-9ae5-4f4d88381985","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to make a code generator in 5 minutes (or less)\",\n  \"description\": \"Every software engineer and every company at some point tries to preserve the knowledge of best practices and know-how-s, in order to prevent making the same mistakes or extra work over and over again. Here is how this problem can be tackled.\",\n  \"keywords\": \"generilla, codegeneration, automation, boilerplate, bootstrap\",\n  \"path\": \"/blog/how-to-make-a-code-generator-in-5-minutes-or-less\",\n  \"date\": \"2020-02-25T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"Karsten WÃ¼rth\",\n    \"image\": \"/assets/blog/0_FHwtFpDTwNsK_oHe.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@karsten_wuerth\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hey, fellas:) Today we talk about how we can benefit from code generation.\"), mdx(\"h2\", null, \"Why {a}\"), mdx(\"h3\", null, \"Allows re-using best practices {a}\"), mdx(\"p\", null, \"Every software engineer and every company at some point tries to preserve the knowledge of best practices and know-how-s, in order to prevent making the same mistakes or extra work over and over again.\"), mdx(\"p\", null, \"I was thinking about this problem as well, so during my career, I have tried:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"writing knowledge base articles,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"saving snippets of code somewhere (files on a cloud drive, bash aliases or live templates in my favorite IDE),\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"heavily abusing object-oriented paradigm in order to make abstract classes that I could eventually publish as a module, then include them into the application and extend for particular needs,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"making skeleton applications.\")), mdx(\"p\", null, \"None of these really worked out.\"), mdx(\"h3\", null, \"Code bootstrapping leads to a productivity boost {a}\"), mdx(\"p\", null, \"When using a generator we can really concentrate on what matters, we don\\u2019t waste time coding pure auxiliary code. We also reduce our chances to make a typo and then dance around the problem for quite a while.\"), mdx(\"p\", null, \"By the way, if we take any more or less mature framework, we may notice that they usually already have a scaffolding tool on-board, which really helps to dive into the process faster.\"), mdx(\"h3\", null, \"How {a}\"), mdx(\"p\", null, \"There are lots of tools that allow us to create code generators. This time we will talk about Generilla \\u2014 a simple code generation tool.\"), mdx(\"h2\", null, \"Step 0. Prerequisites {a}\"), mdx(\"p\", null, \"Generilla is written in Node, so the following things should be pre-installed before we begin:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NPM or Yarn\")), mdx(\"h2\", null, \"Step 1. Installation {a}\"), mdx(\"p\", null, \"To install the tool globally, just type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn global add @generilla/cli\\n\")), mdx(\"p\", null, \"If we don\\u2019t want to make it available for every user of this machine, but still globally for us, we can do the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir ~/.node\\nyarn global add @generilla/cli --prefix ~/.node\\nexport PATH=${PATH}:${HOME}/.node/bin\\n\")), mdx(\"h2\", null, \"Step 2. Scaffolding {a}\"), mdx(\"p\", null, \"Go to the folder where we keep our projects and create a generator:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"generilla scaffold\\n\")), mdx(\"p\", null, \"Let\\u2019s give it a name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-component\"), \", hit Enter and go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-component/\"), \" folder when the generator finishes its work.\"), mdx(\"p\", null, \"There is a folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template/\"), \". Everything inside gets processed by a template engine and copied into the output folder. Remove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[package_name_kebab]/\"), \" folder (because it is a demo template) and create a new one instead, called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name_pascal]/\"), \".\"), mdx(\"h2\", null, \"Step 3. Template files {a}\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template/[component_name_pascal]/\"), \" folder we create files that later will be transformed into the component code.\"), mdx(\"p\", null, \"The most valuable is a module that exports the component function, called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name_pascal].tsx\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"import React, { FunctionComponent } from 'react';\\n\\nimport {\\n    <%- component_name_pascal %>Container,\\n} from './style';\\n\\nimport { Props } from './type';\\n\\nexport const <%- component_name_pascal %>: FunctionComponent<Props> = ({\\n    children,\\n}) => {\\n    return (\\n        <<%- component_name_pascal %>Container>\\n            {children}\\n        </<%- component_name_pascal %>Container>\\n    );\\n};\\n\")), mdx(\"p\", null, \"\\u2705 In the template files it is allowed to use EJS template syntax, so, for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello, <%- component_name %>\"), \" will be translated into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello, Button\"), \".\"), mdx(\"p\", null, \"CSS file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name_pascal]/style.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"import styled from 'styled-components';\\n\\nexport const <%- component_name_pascal %>Container = styled.div`\\n    // style\\n`;\\n\")), mdx(\"p\", null, \"\\u2705 We can add placeholders into file names by using square brackets, like this: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name].tsx\"), \" Any symbol except \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[a-zA-Z0-9_-\\\\.]\"), \" will be omitted in the value that goes instead of the placeholder.\"), mdx(\"p\", null, \"TS type file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name_pascal]/type.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"import { ReactNode } from 'react';\\n\\nexport interface Props {\\n    children?: ReactNode;\\n}\\n\")), mdx(\"p\", null, \"Every complex component should have tests, that is why we enable tests, by creating \", mdx(\"nobr\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[?use_tests]_test_/[component_name_pascal].test.ts\")), \" file as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"import React from 'react';\\nimport { cleanup, render } from '@testing-library/react';\\n\\nimport { <%- component_name_pascal %> } from '../<%- component_name_pascal %>';\\n\\ndescribe('<<%- component_name_pascal %> />', () => {\\n    afterEach(async () => {\\n        cleanup();\\n    });\\n\\n    it('should render itself without errors', async () => {\\n        const { container, getByTestId } = render(\\n            <<%- component_name_pascal %> />,\\n        );\\n\\n        // write more of tests here\\n    });\\n});\\n\")), mdx(\"p\", null, \"\\u2705 It is possible to conditionally omit certain files or sub-folders by adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[condition]\"), \" prefix to a name. For example, a folder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[?use_test][component_name_pascal]/\"), \" will be processed and copied only if use_tests gets evaluated to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(\"p\", null, \"Just to be cool we can have an index file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[component_name_pascal]/index.ts\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"export * from './<%- component_name_pascal %>';\\n\")), mdx(\"h2\", null, \"Step 4. Generator pipeline {a}\"), mdx(\"p\", null, \"Right next to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template/\"), \" folder there is a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \". This file declares the pipeline of a generator. Let\\u2019s remove everything there and make it from scratch.\"), mdx(\"p\", null, \"So, we need to ask a user to provide a value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component_name\"), \" . There is a method to do that \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getQuestions()\"), \" . It returns a structure of questions to be asked. We also need to know component_name_pascal , so we convert component_name to pascal afterward.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"jsx\",\n    \"jsx\": true\n  }), \"module.exports.Generator = class Generator {\\n    getName() {\\n        return 'React Component: TypeScript + testing';\\n    }\\n\\n    getQuestions() {\\n        return [\\n            {\\n                message: 'What is the component name?',\\n                name: 'component_name',\\n            },\\n            {\\n                message: 'Add tests?',\\n                type: 'confirm',\\n                name: 'use_tests',\\n                default: true,\\n            },\\n        ];\\n    }\\n\\n    refineAnswers(answers) {\\n        if (this.util.textConverter) {\\n            answers.component_name_pascal = this.util.textConverter.toPascal(\\n                answers.component_name,\\n            );\\n            answers.component_name = this.util.textConverter.toKebab(\\n                answers.component_name,\\n            );\\n        }\\n\\n        return answers;\\n    }\\n};\\n\")), mdx(\"p\", null, \"The format of this structure comes from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/inquirer\"\n  }), \"Inquirer\"), \". Check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gannochenko/generilla#generator-lifecycle\"\n  }), \"the readme file of Generilla\"), \" to get more information.\"), mdx(\"h2\", null, \"Step 5. Let\\u2019s run it! {a}\"), mdx(\"p\", null, \"It is time to test the thing out. Just run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generilla\"), \" without any parameters and select the generator we just created. Awesome. Now we have our react component in the current folder, ready to be used.\"), mdx(\"p\", null, \"Generilla allows creating quite complex generators for your needs. If you have any questions check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gannochenko/generilla\"\n  }), \"the documentation\"), \" to find out more.\"), mdx(\"p\", null, \"If you liked Generilla, feel free to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gannochenko/generilla\"\n  }), \"give some stars to the project at GitHub\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How to make a code generator in 5 minutes (or less)","date":"2020-02-25T00:00:00.000Z","keywords":"generilla, codegeneration, automation, boilerplate, bootstrap","description":"Every software engineer and every company at some point tries to preserve the knowledge of best practices and know-how-s, in order to prevent making the same mistakes or extra work over and over again. Here is how this problem can be tackled.","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2068v67h8l9-2a371%20371%200%200163%201h1c2-5%202%201%201%2025v25H58c-19%200-24%200-25-2-3-2-14-2-15%201-1%201-1%201-4-1-2-2-3-2-5-1l-2%201c-1-1-2%200-2%201H2c-2-1-2-1-2%2041v43h401v-41c0-43%200-48-3-48l-1-1-1-1-2-1c0-1-5%200-7%202s-7%202-47%202a1244%201244%200%2000-122%207v3c2%202%200%204-4%203-5-2-7%201-5%205%202%202%202%203%200%202-2%200-2%200-2%202%200%204-1%204-5%203-3%200-4-1-6-4-1-3-1-4-3-2h-6l-6%201-2%201v-1c1-1%200-1-2-1-4%201-4-1%200-3%202-1%204-2%203-3l1-1c2-2%201-4-2-3l-3-1-48-3h-7v-11l1-20v-10l4-1c4-2%204-2%201-1-7%201-7%201-14-7l-3-3%204%206c6%207%206%209%206%2029v18h-7v-15a6592%206592%200%20011-19l-6%202h-3l3%201%204%201v30H86v-7c0-36%200-42%202-42l1-1c0-2%204%206%206%2013%202%2010%203%207%200-3l-2-11c0-1%206-3%208-2l2-1c0-1%202-2%206-2l9-1%204-1%205-1%2010-3%208-2%203-1a1759%201759%200%200012-2c3-2%204-3%207-2%204%201%208%200%208-1h5l6-1h3l2-1h1l4%201%204%201c1%201%207%200%206-1l2-1v2h5c3-1%2010%201%2011%202l8%204%201%201%207%201c6%201%207%202%205%203-2%202-1%203%201%203l4%201c2%201%208-1%208-3%200-1%201-1%203%201l5%201%205%201c3%202%203%202%201%202h-4c-2-2-7-3-7-1l2%201%202%201-3%201-2%201%203%201%202%201c-2%202-9%201-9-1l-1-2c-3%200-3%202-1%204s2%202%200%203c-1%201-3%200-8-2l-5-3-3%207c-2%207-2%208-9%2010l-4%201%206-1h6v28l1-12c0-11%201-12%202-10h1l-1-3c-2-3-2-9%200-13l2-4%203%203c3%203%2013%203%2013%200l2-1%202%201c0%202%207%204%2018%203%203%200%205%203%203%204s-1%202%207%203l11%202%2015%201%2014%201%2016%204c22%202%2022%203%2017%204-1%201%200%201%201%201%202%200%203%200%202%201%200%202%202%202%2012%204l3%201%205%201%205%201%201%201h3c5%202%205%205%206-87V0H0v68m0%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.497584541062802,"src":"/static/bd91063f5be17b850b9a97320c796b12/77467/0_FHwtFpDTwNsK_oHe.jpg","srcSet":"/static/bd91063f5be17b850b9a97320c796b12/dece2/0_FHwtFpDTwNsK_oHe.jpg 310w,\n/static/bd91063f5be17b850b9a97320c796b12/fcb16/0_FHwtFpDTwNsK_oHe.jpg 620w,\n/static/bd91063f5be17b850b9a97320c796b12/77467/0_FHwtFpDTwNsK_oHe.jpg 1240w,\n/static/bd91063f5be17b850b9a97320c796b12/b1020/0_FHwtFpDTwNsK_oHe.jpg 1860w,\n/static/bd91063f5be17b850b9a97320c796b12/88564/0_FHwtFpDTwNsK_oHe.jpg 2480w,\n/static/bd91063f5be17b850b9a97320c796b12/de9c6/0_FHwtFpDTwNsK_oHe.jpg 4000w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"Karsten WÃ¼rth","source":"https://unsplash.com/@karsten_wuerth","sourceText":"Unsplash","is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"f58f2983-f3e8-5c66-9ae5-4f4d88381985"}}}