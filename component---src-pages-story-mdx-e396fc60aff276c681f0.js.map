{"version":3,"sources":["webpack:///./src/pages/story.mdx","webpack:///./src/components/LayoutInner/style.ts","webpack:///./src/components/LayoutInner/LayoutInner.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","name","durationA","timeout","isMDXComponent","Body","styled","div","BackLink","Link","theme","fontSize","small","LayoutInner","children","location","pathname","pageContext","frontmatter","title","backUrl","keywords","description","show_title","images","showTitle","displayTitle","coverImage","coverImageData","find","image","is_cover","childImageSharp","fluid","src","type","Typography","main","to"],"mappings":"uSAQO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,cAAC,IAAD,CAAQC,KAAK,mBAAmBC,UAAW,IAAKF,QAAQ,UACtD,gCACA,2GAEF,cAAC,IAAD,CAAQC,KAAK,kBAAkBE,QAAS,IAAKD,UAAW,IAAKF,QAAQ,UACnE,gCACA,4bACA,ufAMNH,EAAWO,gBAAiB,G,2ICrCfC,EAAOC,IAAOC,IAAV,kEAAGD,CAAH,sCAKJE,EAAWF,YAAOG,QAAV,sEAAGH,CAAH,yCAEJ,SAAAP,GAAK,OAAIA,EAAMW,MAAMC,SAASC,S,wBCFlCC,EAAwC,SAAAd,GAAS,IAEtDe,EAcAf,EAdAe,SAFsD,EAgBtDf,EAbAgB,SAHsD,gBAGxB,GAHwB,GAG1CC,gBAH0C,MAG/B,GAH+B,IAgBtDjB,EAZAkB,YACIC,YALkD,gBAa9C,GAb8C,GAM9CC,aAN8C,MAMtC,GANsC,MAO9CC,eAP8C,MAOpC,GAPoC,MAQ9CC,gBAR8C,MAQnC,GARmC,MAS9CC,mBAT8C,MAShC,GATgC,MAW9CC,kBAX8C,MAWjC,EAXiC,MAY9CC,cAZ8C,MAYrC,GAZqC,EAetDC,EACA1B,EADA0B,UAIEC,EACFP,KAFwB,MAAbH,KAEuB,IAAdS,GAAsC,IAAfF,EAE3CI,EAAa,GACjB,GAAIH,EAAQ,CACR,IAAMI,EAAiBJ,EAAOK,MAAK,SAACC,GAAD,OAAgBA,EAAMC,YACrDH,GAAkBA,EAAeE,QACG,iBAAzBF,EAAeE,MACtBH,EAAaC,EAAeE,MACrBF,EAAeE,MAAME,kBAC5BL,EAAaC,EAAeE,MAAME,gBAAgBC,MAAMC,MAKpE,OACI,oCACI,kBAAC,IAAD,CACIf,MAAOA,EACPE,SAAUA,EACVC,YAAaA,EACbQ,MAAOH,GAA0B,uBAEpCD,GACG,kBAAC,IAAD,CAAWS,KAAK,YACZ,kBAACC,EAAA,EAAD,CAAYC,MAAI,GAAElB,IAG1B,kBAACd,EAAD,KACKS,IACEM,GAAW,kBAACZ,EAAD,CAAU8B,GAAIlB,GAAd,gBAMfP","file":"component---src-pages-story-mdx-e396fc60aff276c681f0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/gannochenko/gannochenko/src/components/LayoutInner/LayoutInner.tsx\";\nimport { Container } from '../../src/components/Container';\nimport { Effect } from '@gannochenko/ui';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Effect name=\"fade-slide-right\" durationA={500} mdxType=\"Effect\">\n      <h3>{`1988`}</h3>\n      <p>{`I was born in Russia, in a small city near the polar circle called Arkhangelsk.`}</p>\n    </Effect>\n    <Effect name=\"fade-slide-left\" timeout={300} durationA={500} mdxType=\"Effect\">\n      <h3>{`2011`}</h3>\n      <p>{`I was a 23-year old student with tremendous amount of free time and zero responsibilities in my life. Unfortunately, back then I had absolutely no idea that in order for the project to succeed, you need to introduce proper planing and milestones. It is totally crucial to delegate, prioritize, manage efforts, constantly re-use as much of assets as possible, provide intermediate versions and demos to tease up users.`}</p>\n      <p>{`Well... due to my lack of management skills back then, the project was eventually ruined by procrastination. Many years have passed since that time, I have settled my private life (LOL) and chose something different rather than gamedev, so there is no chance I am going back on this project, even though EA seem to have intentions to breath-in new life into the CNC universe. Still, it was nice experience on how you should lead your project if the goal is complete failure.`}</p>\n    </Effect>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Body = styled.div`\n    flex-grow: 2;\n    padding-bottom: 5rem;\n`;\n\nexport const BackLink = styled(Link)`\n    text-decoration: none;\n    font-size: ${props => props.theme.fontSize.small};\n`;\n","/* eslint-disable @typescript-eslint/camelcase */\n\nimport React, { FunctionComponent } from 'react';\nimport { Body, BackLink } from './style';\nimport { Props } from './type';\nimport { Container, SEO } from '../';\nimport { Typography } from '../Typography';\n\nexport const LayoutInner: FunctionComponent<Props> = props => {\n    const {\n        children,\n        location: { pathname = '' } = {},\n        pageContext: {\n            frontmatter: {\n                title = '',\n                backUrl = '',\n                keywords = [],\n                description = '',\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                show_title = 1,\n                images = [],\n            } = {},\n        },\n        showTitle,\n    } = props;\n\n    const isRoot = pathname === '/';\n    const displayTitle =\n        title && !isRoot && showTitle !== false && show_title !== 0;\n\n    let coverImage = '';\n    if (images) {\n        const coverImageData = images.find((image: any) => image.is_cover);\n        if (coverImageData && coverImageData.image) {\n            if (typeof coverImageData.image === 'string') {\n                coverImage = coverImageData.image;\n            } else if (coverImageData.image.childImageSharp) {\n                coverImage = coverImageData.image.childImageSharp.fluid.src;\n            }\n        }\n    }\n\n    return (\n        <>\n            <SEO\n                title={title}\n                keywords={keywords}\n                description={description}\n                image={coverImage ? coverImage : '/assets/avatar.jpg'}\n            />\n            {displayTitle && (\n                <Container type=\"standard\">\n                    <Typography main>{title}</Typography>\n                </Container>\n            )}\n            <Body>\n                {children}\n                {!!backUrl && <BackLink to={backUrl}>&larr; Go back</BackLink>}\n            </Body>\n        </>\n    );\n};\n\nexport default LayoutInner;\n"],"sourceRoot":""}