{"version":3,"sources":["webpack:///./src/pages/blog.mdx","webpack:///./src/components/LayoutInner/style.ts","webpack:///./src/components/LayoutInner/LayoutInner.tsx"],"names":["blogIndexQuery","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","data","allMdx","edges","isMDXComponent","Body","styled","div","BackLink","Link","theme","fontSize","small","LayoutInner","children","location","pathname","pageContext","frontmatter","title","backUrl","keywords","description","show_title","images","showTitle","displayTitle","coverImage","coverImageData","find","image","is_cover","childImageSharp","fluid","src","type","Typography","main","to"],"mappings":"sVASO,IAAMA,EAAiB,aAgCjBC,EAAe,GAOtBC,EAAc,CAClBF,iBACAC,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,cAAC,IAAD,CAAWA,QAAQ,aACnB,cAAC,IAAD,CAAcC,KAAMF,EAAME,KAAKC,OAAOC,MAAOH,QAAQ,mBAOzDH,EAAWO,gBAAiB,G,2IClEfC,EAAOC,IAAOC,IAAV,kEAAGD,CAAH,sCAKJE,EAAWF,YAAOG,QAAV,sEAAGH,CAAH,yCAEJ,SAAAP,GAAK,OAAIA,EAAMW,MAAMC,SAASC,S,wBCFlCC,EAAwC,SAAAd,GAAS,IAEtDe,EAcAf,EAdAe,SAFsD,EAgBtDf,EAbAgB,SAHsD,gBAGxB,GAHwB,GAG1CC,gBAH0C,MAG/B,GAH+B,IAgBtDjB,EAZAkB,YACIC,YALkD,gBAa9C,GAb8C,GAM9CC,aAN8C,MAMtC,GANsC,MAO9CC,eAP8C,MAOpC,GAPoC,MAQ9CC,gBAR8C,MAQnC,GARmC,MAS9CC,mBAT8C,MAShC,GATgC,MAW9CC,kBAX8C,MAWjC,EAXiC,MAY9CC,cAZ8C,MAYrC,GAZqC,EAetDC,EACA1B,EADA0B,UAIEC,EACFP,KAFwB,MAAbH,KAEuB,IAAdS,GAAsC,IAAfF,EAE3CI,EAAa,GACjB,GAAIH,EAAQ,CACR,IAAMI,EAAiBJ,EAAOK,MAAK,SAACC,GAAD,OAAgBA,EAAMC,YACrDH,GAAkBA,EAAeE,QACG,iBAAzBF,EAAeE,MACtBH,EAAaC,EAAeE,MACrBF,EAAeE,MAAME,kBAC5BL,EAAaC,EAAeE,MAAME,gBAAgBC,MAAMC,MAKpE,OACI,oCACI,kBAAC,IAAD,CACIf,MAAOA,EACPE,SAAUA,EACVC,YAAaA,EACbQ,MAAOH,GAA0B,uBAEpCD,GACG,kBAAC,IAAD,CAAWS,KAAK,YACZ,kBAACC,EAAA,EAAD,CAAYC,MAAI,GAAElB,IAG1B,kBAACd,EAAD,KACKS,IACEM,GAAW,kBAACZ,EAAD,CAAU8B,GAAIlB,GAAd,gBAMfP","file":"component---src-pages-blog-mdx-83b74b02cbdd7e4a8e20.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/gannochenko/gannochenko/src/components/LayoutInner/LayoutInner.tsx\";\nimport { graphql } from 'gatsby';\nimport { Container } from '../components/Container';\nimport { BlogPostList } from '../components/BlogPostList';\nexport const blogIndexQuery = graphql`\n    query blogIndexQuery {\n        allMdx(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { published: { eq: true } } }\n        ) {\n            edges {\n                node {\n                    id\n                    frontmatter {\n                        title\n                        date\n                        path\n                        preview\n                        description\n                        published\n                        images {\n                            image {\n                                childImageSharp {\n                                    fluid(maxWidth: 1240, quality: 80) {\n                                        ...GatsbyImageSharpFluid_tracedSVG\n                                    }\n                                }\n                            }\n                            is_cover\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  blogIndexQuery,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Container mdxType=\"Container\">\n    <BlogPostList data={props.data.allMdx.edges} mdxType=\"BlogPostList\" />\n    </Container>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Body = styled.div`\n    flex-grow: 2;\n    padding-bottom: 5rem;\n`;\n\nexport const BackLink = styled(Link)`\n    text-decoration: none;\n    font-size: ${props => props.theme.fontSize.small};\n`;\n","/* eslint-disable @typescript-eslint/camelcase */\n\nimport React, { FunctionComponent } from 'react';\nimport { Body, BackLink } from './style';\nimport { Props } from './type';\nimport { Container, SEO } from '../';\nimport { Typography } from '../Typography';\n\nexport const LayoutInner: FunctionComponent<Props> = props => {\n    const {\n        children,\n        location: { pathname = '' } = {},\n        pageContext: {\n            frontmatter: {\n                title = '',\n                backUrl = '',\n                keywords = [],\n                description = '',\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                show_title = 1,\n                images = [],\n            } = {},\n        },\n        showTitle,\n    } = props;\n\n    const isRoot = pathname === '/';\n    const displayTitle =\n        title && !isRoot && showTitle !== false && show_title !== 0;\n\n    let coverImage = '';\n    if (images) {\n        const coverImageData = images.find((image: any) => image.is_cover);\n        if (coverImageData && coverImageData.image) {\n            if (typeof coverImageData.image === 'string') {\n                coverImage = coverImageData.image;\n            } else if (coverImageData.image.childImageSharp) {\n                coverImage = coverImageData.image.childImageSharp.fluid.src;\n            }\n        }\n    }\n\n    return (\n        <>\n            <SEO\n                title={title}\n                keywords={keywords}\n                description={description}\n                image={coverImage ? coverImage : '/assets/avatar.jpg'}\n            />\n            {displayTitle && (\n                <Container type=\"standard\">\n                    <Typography main>{title}</Typography>\n                </Container>\n            )}\n            <Body>\n                {children}\n                {!!backUrl && <BackLink to={backUrl}>&larr; Go back</BackLink>}\n            </Body>\n        </>\n    );\n};\n\nexport default LayoutInner;\n"],"sourceRoot":""}