{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/my-recipe-for-making-meteor-project-deployment-in-centos-7-environment","result":{"data":{"mdx":{"id":"0fc8db29-d983-53bc-9e41-f2523a8f09c3","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My recipe for making Meteor project deployment in Centos 7 environment\",\n  \"description\": \"This is a story of how I am going to tell you a story about how I prepare the production environment for a Meteor application in a very detailed manner. Anyway, we all should know how it is usually done by hands, when no Docker or any other special software involved, shouldn`t we?\",\n  \"keywords\": \"centos, meteorjs, snowflake, devops\",\n  \"path\": \"/blog/my-recipe-for-making-meteor-project-deployment-in-centos-7-environment\",\n  \"date\": \"2017-12-16T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"image\": \"/assets/blog/covers/1_gvqZzkKHBpDdtHiSnyryQg.jpg\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hey there, my dear readers! Today I am going to tell you a story about how I prepare the production environment for a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Meteor\"), \" application in a very detailed manner. Anyway, we all should know how it is usually done by hands, when no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Docker\"), \" or any other special software involved, shouldn`t we? The main question we are going to answer here is: \\u201COkay fine, how to make it work in the end?\\u201D\"), mdx(\"p\", null, \"At this moment we have our well-mastered Meteor app at the local dev machine and the brand new, fresh \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VDS\"), \" we just purchased, with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Centos 7\"), \" onboard, which we are going to utilize.\"), mdx(\"p\", null, \"\\u201CWhy Centos 7?\\u201D \\u2014 you might ask. No reason. I use Debian on my desktop and happy with that, but when it is about networking and stuff like that, RedHat-based distribution is my choice.\"), mdx(\"p\", null, \"Right. So, grab some beer, coffee, tea, whatever and let`s start.\"), mdx(\"h2\", null, \"Step 1. SSH access {a}\"), mdx(\"p\", null, \"The first thing we are going to need is the external IP address \\u2014 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the static IP address\"), \" of our server. How to find out: go to the control panel of the server (whatever it is \\u2014 it depends on your hoster) and look around \\u2014 the address should be there, it goes along with the server. Write it down to your favorite notepad app, you are going to need it. In my case, it is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"173.20.88.42\")), mdx(\"p\", null, \"Under your usual normal user (which is not root I hope) on your dev machine, we generate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RSA\"), \" key pair (if you have done it before, just skip this action):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh-keygen -t rsa -b 4096;\\n\")), mdx(\"p\", null, \"After passing a little quiz by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-keygen\"), \", we can find the new file in our home directory: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/id_rsa.pub\"), \". Now we need to deploy the public key to our server. There are two ways possible:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deploy the key via the control panel of your hoster, if available. This way is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"preferable\"), \" because it guarantees your key will be transferred safely via the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HTTPS\"), \" connection and no root password is exposed during the transfer (THEY are watching!). How to do it exactly \\u2014 depends on the hoster.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In case of the hoster does not provide this feature (baaaad boooy), we can do it by hands, but you are going to need the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"root ssh password\"), \". Where to find: in the hoster control panel \\u2014 it should be there, 100% sure, as this is, like, the initial credentials which always present when you buy a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VDS\"), \".\")), mdx(\"p\", null, \"Assume we have picked the second option, then we upload the public key to the server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scp\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"scp ~/.ssh/id_rsa.pub root@173.20.88.42:~;\\n\")), mdx(\"p\", null, \"where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"173.20.88.42\"), \" is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static IP address of the server\"), \" (notepad, remember?). You will be asked for the root password of the server then. Do not screw up with this! Send only \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".pub\"), \" key, because the other key is private. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Never ever\"), \" show your private key to anybody. Done? Good. Now we log-in the server under root:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh root@173.20.88.42\\n\")), mdx(\"p\", null, \"Type the password again. Then, after you logged in, we set the key as an authorized one and exit the server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"cat ~/id_rsa.pub >> ~/.ssh/authorized_keys;\\nexit;\\n\")), mdx(\"p\", null, \"Done, try to log-in again:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh root@173.20.88.42;\\n\")), mdx(\"p\", null, \"From this moment on, you won\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t be asked for the password anymore: this is the magic of\"), \"RSA` in action.\"), mdx(\"h2\", null, \"Step 2: Regular remote user {a}\"), mdx(\"p\", null, \"We are not going to work under root, we need a special dedicated user to run our project under. I suggest making one user per project (in case if you run several projects on the same server). It brings order to chaos and makes us feel more secure. But first, (not coffee) we update everything:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"yum update;\\n\")), mdx(\"p\", null, \"I usually name the user in the same way I name the project. Let it be\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"useradd myapp;\\n\")), mdx(\"p\", null, \"We also set up the password (you will need it when doing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"su myapp\"), \") and disable log-in with password:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"passwd myapp;\\npasswd -l myapp;\\n\")), mdx(\"p\", null, \"We make this user able to run commands with sudo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"usermod -aG wheel myapp;\\n\")), mdx(\"p\", null, \"Yes, in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u0421entos\"), \" wheel is the sudo group by default.\"), mdx(\"p\", null, \"Now we give our user the same public SSH key we gave to root. No worries, without the private key our public one is just a piece of paper.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"cd /home/myapp/;\\nmkdir ./.ssh; chmod 711 ./.ssh;\\ncat ~/id_rsa.pub >> ./.ssh/authorized_keys;\\nchmod 600 ./.ssh/authorized_keys;\\nchown -R myapp:myapp ./.ssh;\\nrm ~/id_rsa.pub;\\n\")), mdx(\"p\", null, \"Since this moment, we can log-in under our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" without specifying the password too.\"), mdx(\"p\", null, \"In addition, you might want to add some splendid aliases and tune your shell a bit. Just put this listing inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/home/myapp/.bashrc\"), \" and they will take effect on the next login:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"alias rm='rm -ri'\\nalias cp='cp -ri'\\nalias mv='mv -i'\\n\\n# Source global definitions\\nif [ -f /etc/bashrc ]; then\\n        . /etc/bashrc\\nfi\\n\\nalias wf=\\\"tail -f -n 0\\\"\\nalias mkdir=\\\"mkdir -p\\\"\\nalias findfile=\\\"find ./ -type f -name\\\"\\nalias df=\\\"df -h\\\"\\nalias ls=\\\"ls --color=auto\\\"\\nalias ll=\\\"ls -alFh\\\"\\nalias grepr=\\\"grep -Rn\\\"\\nalias cp=\\\"cp -r\\\"\\n\\nexport PS1='[\\\\t]:\\\\u@\\\\h:\\\\W\\\\$ '\\nexport PAGER=less\\n\")), mdx(\"p\", null, \"You can add more aliases, different and beautiful, if want.\"), mdx(\"h2\", null, \"Step 3. Improve SSH {a}\"), mdx(\"p\", null, \"It is time to make our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" even more secure. Before we start, I would kindly ask you to launch two (better three) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH root\"), \" sessions in the separate terminals. We are going to tune \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" settings, and if you screw up with this, you will no longer able to regain the access to our server, so you will end up texting your hoster support. A quick reminder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh root@173.20.88.42;\\n\")), mdx(\"p\", null, \"Firstly, we disable the firewall, in case we have any (if the server is not the cheapest one, the firewall could be there and could be active):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"systemctl disable firewalld;\\nsystemctl stop firewalld;\\nsystemctl mask firewalld;\\n\")), mdx(\"p\", null, \"We ensure there are no rules left in iptables (that is the name of the Linux firewall):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"iptables -L -v -n\\n\")), mdx(\"p\", null, \"You should see picture like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\\n pkts bytes target     prot opt in     out     source               destination\\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\\n pkts bytes target     prot opt in     out     source               destination\\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\\n pkts bytes target     prot opt in     out     source               destination\\n\")), mdx(\"p\", null, \"That\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s it, you are now as vulnerable as a goat inside the lion\"), \"s cage. Except, you got nothing to steal from you. Yet.\"), mdx(\"p\", null, \"Meanwhile, we could set the hostname, just to be able to find out quickly on which host we are at the moment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"hostnamectl set-hostname myappshost\\n\")), mdx(\"p\", null, \"I hope you know any console-based text editor because now we are going to use one. It will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vi\"), \". If you know nothing about vi, go study it on Wikipedia, it is time to grow up.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \" ...Several hours later... \"))), mdx(\"p\", null, \"Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSHD\"), \" (D \\u2014 stands for \\u201Cdaemon\\u201D) config file like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"vi /etc/ssh/sshd_config;\\n\")), mdx(\"p\", null, \"Edit Port option to move \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" daemon from the standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"22\"), \" port. Unless you want to face some bruteforcers, but the bandwidth is money, you know. In my case, I have picked \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"44227\"), \", but you can choose one between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1025\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"65535\"), \". Specifying something out of this range could (and for sure will) make your server inaccessible over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \", so be extra careful.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Port 44227\\n\")), mdx(\"p\", null, \"Next, allow only the second version of the protocol, as it is more secure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Protocol 2\\n\")), mdx(\"p\", null, \"Disable plain password authorization. Since that you will only be able to get authorized with your private \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" key, so look after it well, better even copy it to some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"USB\"), \" stick.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PasswordAuthentication no\\n\")), mdx(\"p\", null, \"And finally, disable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root SSH\"), \" login at all: with a password or with a key, does not matter. Don\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t worry, you still will be able to start\"), \"root\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"session via\"), \"su root`.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PermitRootLogin no\\n\")), mdx(\"p\", null, \"Done editing the file: exit the editor and reload the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sshd\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"service sshd restart;\\n\")), mdx(\"p\", null, \"And now exit the session:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"exit;\\n\")), mdx(\"p\", null, \"Now try to login with our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp\"), \" user:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh myapp@173.20.88.42 -p 44227;\\n\")), mdx(\"p\", null, \"Worked? It should have. But in case you cant login, go to the terminal with our \\u201Cbackup\\u201D root session and re-check the config file.\"), mdx(\"p\", null, \"As a bonus, you may add some handy aliases to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \" file on your dev machine:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"alias gomyapp=\\\"ssh myapp@173.20.88.42 -p 44227\\\"\\nalias scpmyapp-from=\\\"function _scpmyapp(){ scp -P 44227 myapp@173.20.88.42:$1 $2; };_scpmyapp\\\"\\nalias scpmyapp-to=\\\"function _scpmyappTo(){ scp -P 44227 $1 myapp@173.20.88.42:$2; };_scpmyappTo\\\"\\n\")), mdx(\"p\", null, \"This is for \\u201Cfast\\u201D login and for file transfers over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scp\"), \".\"), mdx(\"h2\", null, \"Step 4: Firewall {a}\"), mdx(\"p\", null, \"Remember we have switched off the firewall? Right. It is time to turn it on back. There is a frontend to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \", called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firewalld\"), \". We are not going to use it. Instead, we will look under the hood an see how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \" actually works.\"), mdx(\"p\", null, \"Next thing we are going to need is server \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WAN interface and its IP address\"), \" \\u2014 the network interface which server uses to connect to the outer world and its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IP address\"), \". How to find out:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ip addr;\\n\")), mdx(\"p\", null, \"The output would be like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\\n    xxxx whatever xxxx\\n    inet 127.0.0.1/8 scope host lo\\n       valid_lft forever preferred_lft forever\\n    xxxx whatever xxxx\\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\\n    xxxx whatever xxxx\\n    inet 173.20.88.42 peer 10.0.0.1/32 brd 173.20.88.42 scope global eth0\\n    xxxx whatever xxxx\\n\")), mdx(\"p\", null, \"On a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VDS\"), \" you will see only two records. This first is your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loopback interface\"), \" which is always present, and the second one is for sure our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WAN\"), \" interface. If you have more than two interfaces in the list, please, consider asking your hoster support about which one to use. In my case, it is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eth0\"), \", with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IP address 173.20.88.42\"), \". Please also keep in mind, that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WAN IP\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external IP\"), \" are not always the same!\"), mdx(\"p\", null, \"So, let`s check again the situation with firewall by typing\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"iptables -L -v -n;\\n\")), mdx(\"p\", null, \"It still should display the empty list of rules, where the \\u201Caccept\\u201D policy is turned on by default. Now, we are going actually to add some rules. Here is the listing, read the explanation inside:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"#!/bin/bash\\n\\nexport IPT=\\\"iptables\\\"\\n\\n# This is your WAN interface name\\nexport WAN=eth0\\n\\n# Clear all chains\\n$IPT -F\\n$IPT -F -t mangle\\n$IPT -X\\n$IPT -t mangle -X\\n\\n# Set the policy by default to DROP. That means everything that does not match the criteria in this file and manually allowed, will be eventually dropped\\n$IPT -P INPUT DROP\\n$IPT -P OUTPUT DROP\\n$IPT -P FORWARD DROP\\n\\n# Allow any traffic through the loopback interface\\n$IPT -A INPUT -i lo -j ACCEPT\\n$IPT -A OUTPUT -o lo -j ACCEPT\\n\\n# Allow ping - a special kind of packages which allows you to do \\\"ping myapp.com\\\"\\n$IPT -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT\\n$IPT -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT\\n$IPT -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT\\n$IPT -A INPUT -p icmp --icmp-type echo-request -j ACCEPT\\n\\n# Allow any outgoing traffic\\n$IPT -A OUTPUT -o $WAN -j ACCEPT\\n\\n# Allow already established connections\\n$IPT -A INPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT\\n$IPT -A OUTPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT\\n$IPT -A FORWARD -p all -m state --state ESTABLISHED,RELATED -j ACCEPT\\n\\n# There is some basic anti-DDOS magic below\\n\\n# Protect against unknown tcp packet flood\\n$IPT -A INPUT -m state --state INVALID -j DROP\\n$IPT -A FORWARD -m state --state INVALID -j DROP\\n\\n# Protect against zero-size tcp\\n$IPT -A INPUT -p tcp --tcp-flags ALL NONE -j DROP\\n\\n# Protect against syn-flood\\n$IPT -A INPUT -p tcp ! --syn -m state --state NEW -j DROP\\n$IPT -A OUTPUT -p tcp ! --syn -m state --state NEW -j DROP\\n\\n# Protect against HTTP(S) flood\\n$IPT -A INPUT -p tcp --dport 80 -i $WAN -m state --state NEW -m recent --set\\n$IPT -A INPUT -p tcp --dport 80 -i $WAN -m state --state NEW -m recent --update --seconds 60  --hitcount 15 -j DROP\\n$IPT -A INPUT -p tcp --dport 443 -i $WAN -m state --state NEW -m recent --set\\n$IPT -A INPUT -p tcp --dport 443 -i $WAN -m state --state NEW -m recent --update --seconds 60  --hitcount 15 -j DROP\\n\\n# Also, you can block the specific addresses in case you are annoyed with it. I am going to leave this line commented out for now\\n#$IPT -A INPUT -s 84.122.21.197 -j REJECT\\n\\n# Allow SSH traffic. Notice the port number, it should match the one we picked before!\\n$IPT -A INPUT -i $WAN -p tcp --dport 44227 -j ACCEPT\\n\\n# Allow HTTP\\\\HTTPS traffic\\n$IPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\\n$IPT -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT\\n\\n# Allow DNS traffic\\n$IPT -A INPUT -i $WAN -p udp --dport 53 -j ACCEPT\\n\\n# You can optionally enable logging, just for debug purposes. Dont forget to comment it back,\\n# logs files will be happy to consume your hdd\\n#$IPT -N block_in\\n#$IPT -N block_out\\n#$IPT -N block_fw\\n#$IPT -A INPUT -j block_in\\n#$IPT -A OUTPUT -j block_out\\n#$IPT -A FORWARD -j block_fw\\n#$IPT -A block_in -j LOG --log-level info --log-prefix \\\"--IN--BLOCK\\\"\\n#$IPT -A block_in -j DROP\\n#$IPT -A block_out -j LOG --log-level info --log-prefix \\\"--OUT--BLOCK\\\"\\n#$IPT -A block_out -j DROP\\n#$IPT -A block_fw -j LOG --log-level info --log-prefix \\\"--FW--BLOCK\\\"\\n#$IPT -A block_fw -j DROP\\n\")), mdx(\"p\", null, \"Place this listing in the file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/root/iptables.sh\"), \" (by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vi\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scp\"), \"), make it executable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"chmod 700 /root/iptables.sh;\\n\")), mdx(\"p\", null, \"And, eventually, execute the file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"/root/iptables.sh;\\n\")), mdx(\"p\", null, \"Are you still with me? Do you have your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" connection safe and sound? If not, you screwed up with the file. No worries, just go to the control panel and restart the server. After server restarts, all rules should become empty again. Then you fix the file and re-try.\"), mdx(\"p\", null, \"You can check if all the rules are there, by running one more time:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"iptables -L -v -n;\\n\")), mdx(\"p\", null, \"As soon as you are happy, we need to make these rules permanent. Do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"yum install iptables-services;\\n\")), mdx(\"p\", null, \"This tool will allow us to controll \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \" in a service manner. Then write the current rule table into the config file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"/sbin/iptables-save  > /etc/sysconfig/iptables;\\n\")), mdx(\"p\", null, \"And finally, start the iptables service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"systemctl enable iptables.service;\\nsystemctl start iptables.service;\\n\")), mdx(\"p\", null, \"This will make sure your firewall is up and running, with everything applied as requested.\"), mdx(\"p\", null, \"At this point, we exit root session and log-in under our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp\"), \" user. It is time.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"exit;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh myapp@173.20.88.42 -p 44227;\\n\")), mdx(\"h2\", null, \"Step 5: NodeJS and NPM {a}\"), mdx(\"p\", null, \"There are options\\u2026 We can install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodejs\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" globally, so, for the entire server we will have the same nodejs version. In general, this is not quite a brilliant solution, as soon as you want to run several \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodejs\"), \" applications. Another option could be to install nodejs locally for each user (one user \\u2014 one application, remember?) We will consider both ways.\"), mdx(\"p\", null, \"First, we need to pick the right version of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodejs\"), \". It is very tempting to deploy the latest, fancy, bleeding-edge version available. But this is not going to work in the real life. In the real life, we face a lot of outdated, yet useful packages and frameworks, which are mandatory in the everyday life, but refuse to work on newer versions of nodejs. As an example, the recommended version of nodejs for Meteor 1.5 is\\u2026 4.8.6 or around that version. Having in mind the current stable version is 9. Life is hard.\"), mdx(\"p\", null, \"Also, we can install nodejs in several different ways: install with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yum\"), \", install some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre-built executable\"), \" and even build it from source. We are going to use the second option. We go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/\"\n  }), \"https://nodejs.org\"), \" and pick the right binary for our architecture.\"), mdx(\"p\", null, \"Now, to install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"globally\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd ~;\\nwget https://nodejs.org/download/release/v4.8.6/node-v4.8.6-linux-x64.tar.gz;\\nsudo tar --strip-components 1 -xzvf node-v* -C /usr/local;\\n\")), mdx(\"p\", null, \"Or, to install nodejs \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"locally\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp\"), \" user:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd ~;\\nmkdir .node;\\ncd .node;\\nwget https://nodejs.org/dist/v4.8.6/node-v4.8.6-linux-x64.tar.xz;\\ntar xf node-v4.8.6-linux-x64.tar.xz;\\nrm node-v4.8.6-linux-x64.tar.xz;\\nmv node-v4.8.6-linux-x64 4.8.6;\\nln -s 4.8.6 current;\\necho \\\"export PATH=\\\\\\\"~/.node/current/bin:$PATH\\\\\\\"\\\" >> ~/.bashrc;\\n\")), mdx(\"p\", null, \"Now to check the executable, re-login and test:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"exit;\\nssh myapp@173.20.88.42 -p 44227;\\nnode --version;\\nnpm --version;\\n\")), mdx(\"p\", null, \"Worked? Good. We are half-way there.\"), mdx(\"h2\", null, \"Step 6. MongoDB {a}\"), mdx(\"p\", null, \"Now it is time to set-up our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MongoDB\"), \" server. Nowadays, everywhere we hear the modern \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Cmicroservices\\u201D\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201CPAAS\\u201D\"), \" terms, so, for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MongoDB\"), \", there are also options. We could use any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MongoDB PAAS\"), \", which offers really fancy infrastructure, backups, scaling, sharding, monitoring and profiling out-of-the-box, but, unfortunately, not for free. For an established project this option is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"preferable\"), \", but at the beginning, you are probably not even close to 10% sure the project you have built will gain some profit. So I hope you are as greedy as I am because now we are going to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MongoDB\"), \" locally.\"), mdx(\"p\", null, \"As a good start, I offer you to look at the documentation on the official website: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/\"\n  }), \"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/\"), \" It is short, easy and sound.\"), mdx(\"p\", null, \"As soon as you are ready, start the server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo systemctl start mongod.service;\\nsudo systemctl enable mongod.service;\\n\")), mdx(\"p\", null, \"But not so fast, always mind the security, mister. First of all, lets set up the database password. Start the mongo shell, let`s create some user credentials.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mongo --port 27017;\\n\")), mdx(\"p\", null, \"First, create the administrator:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"use admin;\\ndb.createUser({\\n    user: \\\"administrator\\\",\\n    pwd: \\\"adminpassword123\\\",\\n    roles: [ { role: \\\"userAdminAnyDatabase\\\", db: \\\"admin\\\" } ]\\n});\\n\")), mdx(\"p\", null, \"Then, create a regular user to manage our project database. Let's name the database after the project \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"use myapp;\\ndb.createUser({\\n    user: \\\"myapp\\\",\\n    pwd: \\\"applicationpasswordXYZ\\\",\\n    roles: [ { role: \\\"readWrite\\\", db: \\\"myapp\\\" } ]\\n});\\n\")), mdx(\"p\", null, \"Of course, use your own, randomly-generated and long passwords here.\"), mdx(\"p\", null, \"Now exit shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"exit;\\n\")), mdx(\"p\", null, \"Now edit mongod config file here: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/mongod.conf\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo vi /etc/mongod.conf;\\n\")), mdx(\"p\", null, \"Modify the block of settings in the following way to enable security:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"security\\n    authorization: enabled\\n\")), mdx(\"p\", null, \"Reload the mongod service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo systemctl restart mongod.service;\\n\")), mdx(\"p\", null, \"By the way, the database connection string in your application will look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"mongodb://myapp:applicationpasswordXYZ@localhost:27017/myapp\\n\")), mdx(\"p\", null, \"The last thing we for sure will do \\u2014we open the database to the outer world. It could be useful when you need to make a quick look at the production database with your desktop client, but we need to make some precautions.\"), mdx(\"p\", null, \"There are two ways of acheive this:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Expose the database to the WAN directly, or\\u2026\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a SSH tunnel.\")), mdx(\"p\", null, \"We are going to discuss both.\"), mdx(\"h3\", null, \"Exposing mongodb to WAN (option one) {a}\"), mdx(\"p\", null, \"We are going to need to know the IP address of your computer. Sounds a bit scary, doesn't it? How to find out (in case you don't know): google the phrase \\u201Cmy ip address\\u201D and enter the first website, for example, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.myipaddress.com/show-my-ip-address/\"\n  }), \"http://www.myipaddress.com/show-my-ip-address/\"), \". Let's assume your address is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"213.71.25.78\")), mdx(\"p\", null, \"Next, add the following rules to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"iptables -A INPUT -s 213.71.25.78 -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT;\\niptables -A OUTPUT -d 213.71.25.78 -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT;\\n\")), mdx(\"p\", null, \"Reload \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \" when done. Make sure the rules took effect.\"), mdx(\"p\", null, \"After that, let's edit mongod config file here: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/mongod.conf\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ sudo vi /etc/mongod.conf;\\n\")), mdx(\"p\", null, \"Modify the block of settings in the following way:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"net:\\n    bind_ip = 127.0.0.1,173.20.88.42\\n\")), mdx(\"p\", null, \"Where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"173.20.88.42\"), \" is, as you remember, your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WAN IP address\"), \". What is going on here? The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bind_ip\"), \" option contains the list of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IP addresses\"), \" our mongod binds at. Currently, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loopback\"), \" and wan interfaces are allowed.\"), mdx(\"p\", null, \"Reload the mongod service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo systemctl restart mongod.service;\\n\")), mdx(\"p\", null, \"Please note though, your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IP address\"), \" is not static. It will alter every time you move from one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wifi\"), \" spot to another, when you restart your router, laptop and so on. So actually you may consider this only as a temporal measure. The more advanced option could be is to establish a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" tunnel to your server.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Never ever\"), \" leave your mongodb exposed to the outer world and unprotected with a password! One day some other guy will for sure get that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IP address\"), \" you allowed, and then\\u2026 probably nothing will happen until your project is enough popular. But you got the idea, right?\"), mdx(\"h3\", null, \"SSH tunnel (option two, better) {a}\"), mdx(\"p\", null, \"The disadvantages of the previous method are obvious: it has weak security level, you need to update the firewall configuration to update the IP address frequently and so on. So, let me show you how we can make use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" in order to make a safe connection to our database. I assume now you got rid of all the changes made during the discussion of the first option, and reloaded the server. Now, let`s execute the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh myapp@173.20.88.42 -p 44227 -Nf -L 27018:localhost:27017;\\n\")), mdx(\"p\", null, \"What does it do?\"), mdx(\"p\", null, \"First, it connects to our server by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" with our private key. Then it makes a tunnel to our mongod server running on the remote \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"27017\"), \" port, establishes a local server (on the dev machine) and keeps running in the background. Now we can connect to our database as if it is running on our local machine, by typing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mongo --port 27018 myapp;\\n\")), mdx(\"p\", null, \"Note, that now the port is not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"27017\"), \", but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"27018\"), \". Everything you send to this server, automatically goes to the tunnel and then to the mongod server running on the production, safely and secure! Magic.\"), mdx(\"p\", null, \"I also offer you to make use of some cool \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GUI\"), \" tool to manage your databases, instead of typing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongodb\"), \" commands in the terminal. Such software usually supports a lot of handy features, including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSH\"), \" tunneling in particular.\"), mdx(\"h2\", null, \"Step 7. Domain name {a}\"), mdx(\"p\", null, \"Let me provide you with a brief instruction about how to buy a domain name for your application, and set it up. Four simple steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Go to your favorite domain name registrar and buy the domain you liked. In our case, I assume, the domain will be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"myapp.com\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now you need to \\u201Cplace\\u201D this domain on a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DNS\"), \" server, which will be responsible for the domain in future. It is called \\u201Cto delegate the domain\\u201D. Usually, it can be done through registrar's interface on their website.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You need to set up a so-called A record, which allows to map your domain name to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IP address\"), \" of our server. In our case, to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"173.20.88.42\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Wait till your update is spread across the whole \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DNS\"), \" system. It can take up to 72 hours, but it never took more than a day in my case.\")), mdx(\"p\", null, \"As always, there could be complications. By default, the domain will be delegated to the registrar's server. But some services do not provide the ability to set up A record for the domain for free. Instead of paying money to them, you could try and delegate the domain to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DNS\"), \" server of your hoster, and probably there you can do it with no extra charges (you already paid them for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VDS\"), \", what else do they need, huh?).\"), mdx(\"p\", null, \"If you feel confident and brave enough, you can even set up your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DNS\"), \" server, make it responsible for a zone of your domain and delegate the domain. But, as you understand, it will require extra work and involves higher responsibility\\u2026\"), mdx(\"h2\", null, \"Step 8. Nginx {a}\"), mdx(\"p\", null, \"Let's install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx\"), \". That one is easy.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo yum install epel-release;\\nsudo yum install nginx;\\nsudo systemctl start nginx.service;\\nsudo systemctl enable nginx.service;\\n\")), mdx(\"p\", null, \"Now we are going to customize it`s config file a bit. Actually, we will replace it completely.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"vi /etc/nginx/nginx.conf;\\n\")), mdx(\"p\", null, \"Here is the contents of the config file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"user nginx;\\nworker_processes auto;\\npid /run/nginx.pid;\\n\\nevents {\\n    worker_connections 1024;\\n}\\n\\nhttp {\\n    log_format  main  '$remote_addr - $remote_user [$time_local] \\\"$request\\\" '\\n                      '$status $body_bytes_sent \\\"$http_referer\\\" '\\n                      '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"';\\n\\n    access_log /var/log/nginx/access.log  main;\\n    error_log /var/log/nginx/error.log warn;\\n\\n    sendfile            on;\\n    tcp_nopush          on;\\n    tcp_nodelay         on;\\n    keepalive_timeout   65;\\n    types_hash_max_size 2048;\\n    client_max_body_size 5M;\\n    include             /etc/nginx/mime.types;\\n    default_type        application/octet-stream;\\n\\n    server_tokens off; # for security-by-obscurity: stop displaying nginx version\\n\\n    # this section is needed to proxy web-socket connections\\n    map $http_upgrade $connection_upgrade {\\n        default upgrade;\\n        ''      close;\\n    }\\n\\n    include /etc/nginx/sites-enabled/*;\\n}\\n\")), mdx(\"p\", null, \"We will manage virtual hosts in the Apache way: we create a separate file for each new application, having it inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/sites-available/\"), \", then creating the symbolic link to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/sites-enabled/\"), \". Cool, huh? Let`s do it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mkdir /etc/nginx/sites-available;\\nsudo mkdir /etc/nginx/sites-enabled;\\n\")), mdx(\"p\", null, \"Now we create the file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/sites-available/\"), \" called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myapp.conf\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo vi /etc/nginx/sites-available/myapp.conf;\\n\")), mdx(\"p\", null, \"With the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"server {\\n    listen 80;\\n    server_name myapp.com my-app.com my-whatever-else-app.com;\\n\\n    ######################################\\n    # HTTP -> HTTPS\\n    # redirect all domains to the canonical one: myapp.com\\n    rewrite     ^   https://myapp.com$request_uri? permanent;\\n}\\n\\nserver {\\n    listen 443 ssl;\\n    server_name myapp.com;\\n\\n    ######################################\\n    # SSL config\\n\\n    # self-signed:\\n    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\\n    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\\n\\n    # real:\\n    # ssl_certificate /etc/letsencrypt/live/myapp.com/fullchain.pem;\\n    # ssl_certificate_key /etc/letsencrypt/live/myapp.com/privkey.pem;\\n\\n    # performance enhancement for SSL\\n    ssl_stapling on;\\n    ssl_session_cache shared:SSL:10m;\\n    ssl_session_timeout 5m;\\n\\n    # safety enhancement to SSL: make sure we actually use a safe cipher\\n    ssl_prefer_server_ciphers on;\\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK';\\n\\n    # config to enable HSTS\\n    # to avoid ssl stripping\\n    add_header Strict-Transport-Security \\\"max-age=31536000;\\\";\\n\\n    ######################################\\n    # Verifications\\n    # letsencrypt certbot\\n    location /.well-known {\\n        alias /home/nginx/ssl/myapp/.well-known;\\n    }\\n    # google\\n    location /google999999999999999.html {\\n        rewrite ^/(.*)  $1;\\n        return 200 \\\"google-site-verification: $uri\\\";\\n    }\\n\\n    ######################################\\n    # Proxy pass\\n\\n    try_files $uri $uri/ =404;\\n\\n    location / {\\n        proxy_pass http://localhost:11001;\\n        proxy_http_version 1.1;\\n        proxy_set_header Upgrade $http_upgrade; #for websockets\\n        proxy_set_header Connection $connection_upgrade;\\n        proxy_set_header X-Forwarded-For $remote_addr;\\n        proxy_set_header Host $host;\\n    }\\n}\\n\")), mdx(\"p\", null, \"What is important here for us? As you can see, we declared actually two servers. The first one accepts connections with the insecure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP\"), \" to the domain itself or to its ugly dwarf twins and redirects everything to the canonical \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://myapp.com/\"\n  }), \"https://myapp.com\"), \" domain. The second server describes so-called reversed-proxy pass which basically dumps all the incoming traffic to our Meteor application, which, in order, hangs on the loopback interface, being inaccessible externally. This approach is called \\u201Cto use Nginx as a frontend\\u201D.\"), mdx(\"p\", null, \"In this case, Nginx also takes care about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TLS\"), \", so you don't need to set up any certificates on the level of Meteor application itself. Also, note the port number in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:11001\"\n  }), \"http://localhost:11001\"), \" \\u2014 you are going to make use of it later.\"), mdx(\"p\", null, \"So, at this moment we create a self-signed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TLS\"), \" certificate. No worries, it is just for testing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mkdir /etc/ssl/private/;\\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt;\\n\")), mdx(\"p\", null, \"Then we activate our virtual host:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd /etc/nginx/sites-enabled/;\\nsudo ln -s ../sites-available/myapp.conf ./;\\n\")), mdx(\"p\", null, \"And reload \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo nginx -s reload;\\n\")), mdx(\"p\", null, \"Hopefully, you will not see any errors.\"), mdx(\"p\", null, \"Checking! In your favorite browser, type \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://myapp.com\"\n  }), \"http://myapp.com\"), \" If you got redirected to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://myapp.com\"\n  }), \"https://myapp.com\"), \", you see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx Bad Gateway 502\"), \" error and the browser started to complain about the invalid certificate \\u2014 you are on the right way. Great. Now we get a valid certificate.\"), mdx(\"h2\", null, \"Step 9. TLS {a}\"), mdx(\"p\", null, \"Instead of buying an expensive commercial certificate, we are going to satisfy our needs with the free one, put in use the famous \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"letsencrypt.com\"), \" service. So, first, install the software:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo yum install certbot;\\nsudo yum install cronie;\\n\")), mdx(\"p\", null, \"Then we create folders which will help us to pass the challenge and save the princess. \\u201CWhat challenge, dude? What princess?\\u201D \\u2014 I see your question. Well, you need to prove that you own the domain you are going to protect with a certificate, that is why certbot places a special file, which should be correctly served by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx\"), \" so it becomes accessible from outside.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mkdir -p /home/nginx/ssl/myapp/.well-known;\\nsudo chown -R nginx:nginx /home/nginx/;\\n\")), mdx(\"p\", null, \"Now try to obtan the certificate:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"certbot certonly --webroot -w /home/nginx/ssl/myapp/ -d myapp.com --dry-run;\\n\")), mdx(\"p\", null, \"If it says the dry run was successful, repeat the same command without the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dry-run\"), \" option. Hopefully, you will find your certificate at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/letsencrypt/live/myapp.com/\"), \". In case of any problems, don't force the certbot to execute the command multiple times: if you fail \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20\"), \" attempts in a row, you will end up banned for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" hour.\"), mdx(\"p\", null, \"The last thing: go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx\"), \" virtual host config file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo vi /etc/nginx/sites-available/myapp.conf;\\n\")), mdx(\"p\", null, \"Remove lines for the self-signed certificate, and un-comment lines for the real one. Reload Nginx:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo nginx -s reload;\\n\")), mdx(\"p\", null, \"Go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://myapp.com\"\n  }), \"https://myapp.com\"), \". Hopefully, you can see the browser now treats your certificate as valid, green and happy.\"), mdx(\"p\", null, \"You think we are done? Not so fa-ast! The certificate issued by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Letsencrypt\"), \" stays valid only for 3 months (or so), that is why we need to make it auto-renewable. Remember we installed cronie before? Right. Start the root session (you are going to need your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root password\"), \" here):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"su root;\\n\")), mdx(\"p\", null, \"Now edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root's\"), \" crontab:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"bashRoot\",\n    \"bashRoot\": true\n  }), \"crontab -e;\\n\")), mdx(\"p\", null, \"And place the following there:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"00 05 * * * /usr/bin/certbot renew\\n03 05 * * * /usr/bin/systemctl reload nginx\\n\")), mdx(\"p\", null, \"This will run the renewal request every day at 5 am and, 3 minutes later, reload \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Nginx\"), \".\"), mdx(\"p\", null, \"Now it is done.\"), mdx(\"h2\", null, \"Step 10. PM2 and Deployment {a}\"), mdx(\"p\", null, \"Guys, we are almost there! Now it is time to find out, how we are going to deploy the application itself!\"), mdx(\"p\", null, \"First step: on the server we install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pm2\"), \" \\u2014 the advanced process manager for launching \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodejs\"), \" applications. It provides a lot of features, you are going to like it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo npm install pm2 -g;\\n\")), mdx(\"p\", null, \"Now go to your local machine, and install there \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pm2-meteor\"), \" \\u2014 a version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pm2\"), \" made specially for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Meteor\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i pm2-meteor -g;\\n\")), mdx(\"p\", null, \"Open the folder with your app, for example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd /home/developer/work/myapp/;\\n\")), mdx(\"p\", null, \"We are going to create the deployment settings folder there:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir -p ./.deployment/production/;\\ncd .deployment/production/;\\necho \\\"{}\\\" > settings.json;\\n\")), mdx(\"p\", null, \"Just like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gulp\"), \" or other similar software, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pm2-meteor\"), \" uses special \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json\"), \" file to keep the configuration. We either generate this file with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pm2-meteor init;\\n\")), mdx(\"p\", null, \"Or we can write it manually. Here is the example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"appName\\\": \\\"myapp\\\",\\n    \\\"appLocation\\\": {\\n        \\\"local\\\": \\\"../../\\\"\\n    },\\n    \\\"meteorSettingsLocation\\\": \\\"./settings.json\\\",\\n    \\\"meteorSettingsInRepo\\\": false,\\n    \\\"prebuildScript\\\": \\\"\\\",\\n    \\\"meteorBuildFlags\\\": \\\"--architecture os.linux.x86_64\\\",\\n    \\\"env\\\": {\\n        \\\"ROOT_URL\\\": \\\"https://myapp.com\\\",\\n        \\\"PORT\\\": \\\"11001\\\",\\n        \\\"MONGO_URL\\\": \\\"mongodb://myapp:applicationpasswordXYZ@localhost:27017/myapp\\\"\\n    },\\n    \\\"server\\\": {\\n        \\\"host\\\": \\\"173.20.88.42\\\",\\n        \\\"port\\\": \\\"44227\\\",\\n        \\\"username\\\": \\\"myapp\\\",\\n        \\\"deploymentDir\\\": \\\"/home/myapp\\\",\\n        \\\"loadProfile\\\": \\\"\\\",\\n        \\\"nvm\\\": {\\n            \\\"bin\\\": \\\"\\\",\\n            \\\"use\\\": \\\"\\\"\\n        },\\n        \\\"exec_mode\\\": \\\"cluster_mode\\\",\\n        \\\"instances\\\": \\\"2\\\",\\n        \\\"pem\\\": \\\"/home/developer/.ssh/id_rsa\\\"\\n    }\\n}\\n\")), mdx(\"p\", null, \"Let's discuss important parts here:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"env.ROOT_URL\"), \" \\u2014 this is our domain with https attached.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"env.PORT\"), \" \\u2014 the application \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TCP\"), \" port to bind at. Remember the config file of our nginx proxy-pass? Yes, the same number here.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"env.MONGO_URL\"), \" \\u2014 the connection string to our local \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MongoDB\"), \" server\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"server.host\"), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WAN IP address\"), \" of our \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VDS\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"server.port\"), \" \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SSH\"), \" port\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sever.username\"), \" \\u2014 the application user\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"server.deploymentDir\"), \" \\u2014 our project root folder on the server\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"server.pem\"), \" \\u2014 the path to your \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"private\"), \" (not public) \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SSH\"), \" key on your \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"local machine\"), \" (this one is used to make a connection when deploying)\")), mdx(\"p\", null, \"In addition, if your server has several cores (a good server should have more than one), we can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.exec_mode\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Ccluster_mode\\u201D\"), \" and specify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number of cores\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.instances\"), \". It will allow us to run several instances of the application an balance between them.\"), mdx(\"p\", null, \"Now the deployment is simple like never. At the same folder just type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pm2-meteor deploy;\\n\")), mdx(\"p\", null, \"At the end of the process, go to the server and type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pm2 imonit;\\n\")), mdx(\"p\", null, \"You will see your instances up and running. Finally access your application at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://myapp.com\"\n  }), \"https://myapp.com\"), \". It`s alive\\u2026 ALIVE!!!\"), mdx(\"p\", null, \"You can view the console output of your application by typing\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pm2 log --lines 10;\\n\")), mdx(\"h2\", null, \"Step 11. Autorun {a}\"), mdx(\"p\", null, \"Last step, guys! We need to make sure our application starts automatically after the server gets restarted. Forget about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"forever\"), \" and stuff like that, with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pm2\"), \" it is very easy to achieve:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pm2 startup;\\npm2 save;\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PM2\"), \" is smart enough to detect we are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Centos\"), \" and that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SystemD\"), \" is available. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SystemD\"), \" is a special mechanism that helps to control applications. After this is done, open the file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo vi /etc/systemd/system/pm2-myapp.service;\\n\")), mdx(\"p\", null, \"And remove the following line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Type=forking\\n\")), mdx(\"p\", null, \"It should not be there, this is a bug in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PM2\"), \" service file generator.\"), mdx(\"p\", null, \"Guys, an important remark, while you are still here. If due to some reason you decided not to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PM2\"), \" for the deployment process, and instead decided to deploy by hands (still possible yet more complicated): do not forget to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_ENV\"), \" to \\u201Cproduction\\u201D. By not doing so, when typing \\u2018npm install\\u2019 you will add a lot of packages which are meant to be used only in the development environment. For example, babel, mocha, gulp and other packages could be installed. Moreover, in the \\u2018development\\u2019 mode some packages can have severe security and performance issues, so be careful.\"), mdx(\"p\", null, \"The easiest way to set the variable is to execute the following command, being logged in under myapp user:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"echo \\\"export NODE_ENV=\\\\\\\"production\\\\\\\"\\\" >> ~/.bashrc;\\n\")), mdx(\"p\", null, \"and then relogin\\\\restart the server. In case of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PM2\"), \", it will set up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_ENV\"), \" automatically inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SystemD\"), \" service file.\"), mdx(\"h2\", null, \"Conclusion {a}\"), mdx(\"p\", null, \"Well, that is basically all. Pheeew\\u2026 That was a long one. We have gone from the top to the bottom, reviewed the entire process. Now you know how to make use of the Meteor application you wrote. Further improvements could involve, for instance:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make use of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Docker\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Implement continuous integration with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Travis\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Jenkins\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set-up the production of daily backups\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configure integration with services like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Prerender\"), \", to make your app crawlable\")), mdx(\"p\", null, \"Thanks for reading, guys, have fun!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"My recipe for making Meteor project deployment in Centos 7 environment","date":"2017-12-16T00:00:00.000Z","keywords":"centos, meteorjs, snowflake, devops","description":"This is a story of how I am going to tell you a story about how I prepare the production environment for a Meteor application in a very detailed manner. Anyway, we all should know how it is usually done by hands, when no Docker or any other special software involved, shouldn`t we?","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='300'%20viewBox='0%200%20400%20300'%20preserveAspectRatio='none'%3e%3cpath%20d='M1%201a1998%201998%200%20002%20137c0-3%204-2%205%201%202%203%200%207-4%207-2%200-3-1-3-2a590%20590%200%20001%2072c-1%201-2%207-2%2042v42h3c3%200%203%200%203-3%200-7%204-6%206%200l1%204v-4c0-2%200-3%202-3s4%203%203%205v1l1-3c1-3%204-2%206%201%201%202%201%202%201%200%200-3%203-3%205%200%201%202%203%202%2027%202h25v-2l1-4c0-2%203-2%205-1l1%204c0%202%201%203%202%203l1-4-1-4-1-1%202-1c2%200%202%201%202%205%200%205%200%205%203%205s3%200%203-3l-1-4c-1%200%200-2%202-2l1%205v4h62c54%200%2063%200%2062-1-1-4%204-8%209-6h4c2-2%204-3%204-1l2%201v3c-3%201-2%204%200%204%201%200%202-1%203-5%201-5%203-7%204-3l2%202%202%202c1%201%201%201%203-1%203-5%209-3%209%203v2h22c21%200%2023%200%2025-2%202-3%206-3%207%200%202%203%2014%203%2016%201s4-2%206%200c2%201%2014%202%2017%200h5l18%201h16V153c0-81%200-145-1-143%200%204-3%2010-5%2010s-1-5%203-12l3-8a825%20825%200%2000-86%202%20492%20492%200%2000-85%200c-1-2-2-2-62-2l-61%201c1%201-1%206-3%206l-2%202c-1%202-2-1-2-5s0-4-2-3c-3%201-4%204-2%204l2%202-1%201c-2%200-4-2-4-5%200-2-1-3-2-3l-1%201v5c0%203-1%204-3%202l-1-5-1-3H57C34%200%2030%200%2030%202l-1%201-1-2-2%201c-1%203-4%203-5%200%200-3-2-2-1%201%200%202%200%202-1%201-2-3-3-2-3%200s0%202-1%201h-2c-2%203-5%202-5-2%200-3%200-3-3-3L1%201m383%203c-5%202-3%2014%202%2015%204%200%206-2%206-7%200-6-3-10-8-8m-25%204c-2%205%201%2012%205%2012%205%200%207-9%203-14-2-2-7-1-8%202m-22-1c-2%202-1%2010%201%2012%204%204%208%201%208-5s-6-10-9-7m-22%202c-4%205%200%2015%205%2013%204-1%205-10%201-13-3-2-4-2-6%200M21%2011c-1%202-1%202-2%200-2-2-5-1-5%202%200%202%200%202-1%201-3-4-6-2-6%205%200%203%203%204%204%201l3-1h1c0-3%202-2%203%200%201%201%201%201%201-1-1-4%201-5%201-1%201%204%206%202%206-3s-3-7-5-3m6%2013l-1%203c0%202%200%202-1%200-2-4-4-4-5%200h-2c-3-2-5-1-5%202%200%202%200%202-1%200-2-4-5-3-5%202-1%205%200%206%202%206v-8l1%203c0%203%205%204%205%201h1c2%203%203%202%202-1v-3l1%203c2%204%204%204%206%200l1-1%201%202%201-1%202-3c2-1%202-2%202-4-1-2-4-3-5-1m356%202c-2%205%201%2014%205%2014%203%200%205-3%205-7%200-8-6-12-10-7m-23%201c-4%207%203%2018%208%2012%202-3%203-7%201-10-2-5-6-5-9-2m-22%200c-2%202-1%2011%201%2013%203%203%205%203%206%200%205-7-2-18-7-13m-22%202c-5%205%201%2017%206%2012%203-2%203-10%200-12s-4-2-6%200m69%2016c-4%203-1%2016%204%2016s7-10%203-15c-3-2-4-2-7-1m-24%203c-2%203-1%2011%203%2013%203%201%205%201%206-3%203-8-4-17-9-10m-22%200l-1%206c0%207%205%2011%209%205s-3-17-8-11m-22%201c-3%202-3%2010%200%2012%206%206%2011-5%206-11-2-3-4-4-6-1m69%2018c-4%205-2%2014%203%2015s8-9%204-14c-3-4-5-4-7-1m-24%201c-3%205%200%2015%204%2015%205%200%207-9%204-14-2-4-6-4-8-1m-23%201c-4%207%203%2018%208%2013%202-3%201-11-1-13-2-3-6-3-7%200m-23%201c-3%205%200%2014%205%2014%203%200%204-3%204-8%200-6-1-8-5-8l-4%202m-137%207c-1%203%200%2012%202%2013l1-2%201-4c1-1%201-1%201%201%200%203%201%205%202%205l1-2c0-4%202-5%202-2%201%206%207%205%208-1%201-9-7-13-8-4-1%203-1%203-2%201l-3-3-2-2h-3m185%2010c-3%201-3%202%201%209%201%202%201%202-1%202l-1%203c0%202%200%203%203%203%205%200%206-1%206-7%200-8-3-12-8-10m10%200c-2%201-1%204%201%205%203%201%203%201%201%205v6c2%201%202%201%204-4l2-8c0-4%200-5-4-5l-4%201m-45%202c-2%202-3%2011-1%2013%202%203%205%203%207%201%203-2%203-11-1-14-3-2-3-2-5%200m23%200c-1%201%200%204%201%204l1%203-1%202c-1%200-2%203-1%205l4%201c4%200%204%200%204-2l-1-3-1-5c0-6-5-10-6-5m-35%201c-3%203-3%2013%200%2014%206%203%209%200%208-8%200-8-5-10-8-6m-79%2042v13c2%203%2010%201%2010-4l1%201v3c-2%202-1%205%201%205s1%201-1%203c-1%202-2%202-3%201-1-2-3%200-3%204%200%203%200%203-1%200%200-4-3-6-4-3l-1%202-1-2c-4-4-9-1-9%205%200%205%205%208%209%204l2-2v2c1%202%202%202%205%202%204%200%204%200%205-4%200-4%202-5%202-2%200%205%201%206%204%206%204%200%205-2%202-4l-2-2%202-2%203-2-4-3-3-2%203-6c4-8%205-8%206-3%200%203%203%206%206%205%202-1%201-5-1-6v-2c3-2%202-5-1-7-3-1-3-1-5%201%200%201-2%202-3%201-1%200-2%200-3%202h-2c-1-2-4-3-4-1%200%201-5-1-7-3-2-3-3-2-3%200m-17%200c-4%201-6%209-2%2013s8%201%208-5-2-9-6-8m-59%201v13l2-1h8l3%201c2%200%203-1%203-3%202-8-5-11-8-4l-2%202v-2c2-1%200-4-2-4-2%201-2%201-2-1s-1-3-2-1m109%202c-5%205-1%2013%205%2012%204-1%205-9%202-12-2-2-5-3-7%200m11-1v12c4%203%2010-2%208-6l-1-6h-7m-200%206l1%206%201-2c0-3%201-3%203%200%202%202%202%202%203%201h2c4%203%207-2%206-8-2-5-8-3-8%203%200%203%200%204-1%203v-4c0-3-2-5-5-5-2%200-2%200-2%206m-45%2014c-1%201-2%202-3%201h-6c-4-3-7%204-3%208v1c-1%200-2%200-1%201%201%202%202%201%204-2%201-2%202-3%203-1h3v-1c-3%200-2-2%200-2l2-1%201-2%201%203c0%203%202%205%203%203v-1l-1-2%201-3v-2c-2-2-2-2-4%200m280%201c-2%202-2%2011%200%2012%204%202%208%200%208-4%200-8-4-13-8-8m12%200c-3%203-2%209%200%2011%204%204%209%201%209-6%200-6-6-9-9-5m11%200v11c2%203%208%203%209-1%201-2%201-11-1-12-1-1-3%203-3%206%200%204-2%203-2-2-1-4-2-5-3-2m25%200c-2%202-3%209-1%2011%203%203%208%202%208-1l-2-4c-3%200-3%200-1-1%202%200%203-1%203-4s-4-4-7-1m11%200l-2%206c0%206%202%207%206%207%203%200%204-1%204-5%202-8-3-13-8-8M17%20169v8l11%201c1-1%200-1-1-1-3%200-2-2%200-3l3%202c0%202%202%203%202%201l5-6%201%204c1%204%203%204%203-1l1-4c2-1%202-1-13-1H17m300%205c-2%203-3%209-1%2012s7%203%209-1c5-8-2-18-8-11m50-2c-5%201-7%2012-3%2016s9%200%209-8c0-6-2-9-6-8m-26%202c-2%203-3%2012-1%2014s6%201%208-2c4-5%202-14-3-14l-4%202m46%201c-2%203-2%2011%200%2013%204%205%2010%200%2010-8s-6-11-10-5M3%20189c0%205%201%206%204%204h3l1-1%201-2%201%202%202%202h3c1%201%202%201%203-1l2-1%201%202%201-1%202-3c3-1%203-4%200-5-2-1-3%200-4%201%200%201-1%201-2-1H8c-3-3-5-1-5%204m314%206c-4%205-2%2014%203%2014s9-10%205-14c-2-3-7-2-8%200m23%201c-2%203-2%2010%200%2013%204%204%2011-2%2010-9s-6-10-10-4m24%200c-3%203-3%2011%200%2013%203%203%205%202%207-1%205-9-1-20-7-12m24-1c-2%202-4%208-2%2012%201%205%206%205%209%201%205-7-1-19-7-13M66%20222l-1%204%201%204c0%202%204%203%206%201l1-1%201%201v1l2-1c0-3%202-2%203%200l2%202h2c1%202%205%200%206-3%201-5-4-11-7-7-1%202-1%202-3%200s-5-3-5-1h-8m143%208c-5%205%200%2015%206%2011%203-2%203-9%200-11s-4-2-6%200m20-1l-1%208v7h4c4%200%204%200%205-3l1-3%202%203c1%203%201%204-1%205-1%201-1%203%201%203s4-3%206-7c2-6%204-6%205%200%200%203%201%204%203%204%203%200%204-1%204-2l-1-2c-2%200-2-4%200-4%201-1%202-4%200-4l-3-2c-1-1-1-1-3%201-2%201-3%202-4%201s-1-1-2%201l-1%202-2-2c-1-2-2-2-3-1h-3l-3-2-1-2c-1-2-2-3-3-1m32%207c-2%202-3%207%200%209%203%203%208%202%208-2l1-2%201%203c0%203%203%205%206%204%202-1%204-5%202-7v-3c-1-3-5-4-7-1-1%202-1%202-4-1-2-3-4-3-7%200m-237%200c-1%202%200%207%202%208v1c-2%201-1%202%201%201l2-2c1-2%201-2%202-1%202%202%202%202%204%201v-1l-2-1%202-1%203-2%201%203%202%203c2%200%202%200%201-2v-4c1-2-2-5-4-3-1%202-2%202-3%201h-4l-2%201-2-2h-3m226%2018l-2%201c-1-2-4%200-4%203l-1%203-1-3c0-5-1-5-3-3h-2c-1-2-6-3-8-1l-1%205c0%205%204%207%208%203%202-1%202-1%203%201s2%202%205%202%204-1%204-4c0-4%203-5%203%200%200%203%201%205%204%205s4-2%202-3-2-4%200-5c1-2%201-2-1-4-3-3-3-3-6%200m68%205c-3%202-4%2011-1%2012%204%201%209-3%207-7v-3c-1-3-4-4-6-2m10%202c-3%203-3%209%200%2010s6%200%207-2c2-2%202-2%203%201%201%202%207%203%209%201v-12c-1%200-3%203-3%205%200%204-2%204-2-1-1-4-3-5-4-1v2l-1-2c-2-3-7-4-9-1m35%201c-3%203-3%207%200%2010s4%203%206%200l2-3%201%202c2%203%207%204%209%202%202-3%202-11%200-12-3-2-8%201-9%206-1%201-2%202-3%201-4%200-4-2-1-4%203-1%203-3%200-4l-5%202m-339%204v4l1%203c0%202%204%203%206%202h1c1%201%201%201%202-1l2-2%201-1c1-3%203-2%203%202l1%204%201-4%201-4c3-1%201-2-2-2h-5c-3-2-5%200-5%204%200%202%200%203-2%203-2-1-3-3%200-3v-1c-2-2-2-3%200-3l1-1h-6m292%2012c-2%202-3%2010-1%2012%203%203%2010-2%2010-7%200-7-5-9-9-5m22%201c-1%202-2%209-1%2012%202%202%207%201%209-2%205-7-2-17-8-10m24%201c-3%203-3%209-2%2012%205%206%2014-5%2010-12-1-3-6-3-8%200m23%201c-5%205-3%2014%202%2014%206%200%2010-10%206-14-2-3-6-2-8%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3304721030042919,"src":"/static/3967a9af574fdcce9b2c1874afb01d82/77467/1_gvqZzkKHBpDdtHiSnyryQg.jpg","srcSet":"/static/3967a9af574fdcce9b2c1874afb01d82/dece2/1_gvqZzkKHBpDdtHiSnyryQg.jpg 310w,\n/static/3967a9af574fdcce9b2c1874afb01d82/fcb16/1_gvqZzkKHBpDdtHiSnyryQg.jpg 620w,\n/static/3967a9af574fdcce9b2c1874afb01d82/77467/1_gvqZzkKHBpDdtHiSnyryQg.jpg 1240w,\n/static/3967a9af574fdcce9b2c1874afb01d82/b1020/1_gvqZzkKHBpDdtHiSnyryQg.jpg 1860w,\n/static/3967a9af574fdcce9b2c1874afb01d82/88564/1_gvqZzkKHBpDdtHiSnyryQg.jpg 2480w,\n/static/3967a9af574fdcce9b2c1874afb01d82/de9c6/1_gvqZzkKHBpDdtHiSnyryQg.jpg 4000w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":null,"source":null,"sourceText":null,"is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"0fc8db29-d983-53bc-9e41-f2523a8f09c3"}}}